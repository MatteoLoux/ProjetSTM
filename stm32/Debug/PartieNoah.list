
PartieNoah.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c8  080054c8  00007078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054c8  080054c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d0  080054d0  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054d4  080054d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080054d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000078  08005550  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08005550  00007460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001049c  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002507  00000000  00000000  00017544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00019a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0d  00000000  00000000  0001a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027948  00000000  00000000  0001b395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012199  00000000  00000000  00042cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4448  00000000  00000000  00054e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001492be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004130  00000000  00000000  00149304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014d434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005440 	.word	0x08005440

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08005440 	.word	0x08005440

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <MX_GPIO_Init+0x78>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a17      	ldr	r2, [pc, #92]	@ (80005bc <MX_GPIO_Init+0x78>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <MX_GPIO_Init+0x78>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <MX_GPIO_Init+0x78>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a11      	ldr	r2, [pc, #68]	@ (80005bc <MX_GPIO_Init+0x78>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <MX_GPIO_Init+0x78>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <MX_GPIO_Init+0x7c>)
 8000592:	f001 fa15 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000596:	f244 0381 	movw	r3, #16513	@ 0x4081
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_GPIO_Init+0x7c>)
 80005b0:	f001 f85a 	bl	8001668 <HAL_GPIO_Init>

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020400 	.word	0x40020400

080005c4 <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
PUTCHAR_PROTOTYPE
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <__io_putchar+0x20>)
 80005d6:	f002 ffd9 	bl	800358c <HAL_UART_Transmit>
    return ch;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000288 	.word	0x20000288

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005ec:	f000 fa4e 	bl	8000a8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fdc1 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f816 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f7ff ffa4 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 fcfa 	bl	8000ff4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000600:	f000 fba8 	bl	8000d54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000604:	f000 fbfa 	bl	8000dfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000608:	f000 fc46 	bl	8000e98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &ch, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	4903      	ldr	r1, [pc, #12]	@ (800061c <main+0x34>)
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x38>)
 8000612:	f003 f844 	bl	800369e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x2e>
 800061a:	bf00      	nop
 800061c:	20000198 	.word	0x20000198
 8000620:	20000288 	.word	0x20000288

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fc3e 	bl	8004eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xb0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xb0>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xb0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <SystemClock_Config+0xb4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a1b      	ldr	r2, [pc, #108]	@ (80006d8 <SystemClock_Config+0xb4>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <SystemClock_Config+0xb4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f9c9 	bl	8001a28 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800069c:	f000 fa22 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fc58 	bl	8001f70 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 fa0d 	bl	8000ae4 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
        if (!chenillard_actif) return;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d113      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x3e>
        switch (current_pattern){
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d00c      	beq.n	8000714 <HAL_TIM_PeriodElapsedCallback+0x38>
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	dc0e      	bgt.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d002      	beq.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000702:	2b02      	cmp	r3, #2
 8000704:	d003      	beq.n	800070e <HAL_TIM_PeriodElapsedCallback+0x32>
 8000706:	e009      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
        	case 1:
        		chenillard_classique();
 8000708:	f000 f810 	bl	800072c <chenillard_classique>
        		break;
 800070c:	e006      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
        	case 2:
        		chenillard_int_ext();
 800070e:	f000 f843 	bl	8000798 <chenillard_int_ext>
        		break;
 8000712:	e003      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
        	case 3:
        		chenillard_on_off();
 8000714:	f000 f86a 	bl	80007ec <chenillard_on_off>
        		break;
 8000718:	e000      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x40>
        if (!chenillard_actif) return;
 800071a:	bf00      	nop
        }
}
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000094 	.word	0x20000094
 8000728:	20000000 	.word	0x20000000

0800072c <chenillard_classique>:

void chenillard_classique(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	static int i = 0;
	static int direction = 1;

	reset_led();
 8000730:	f000 f8ae 	bl	8000890 <reset_led>
	HAL_GPIO_WritePin(GPIOB, leds[i], GPIO_PIN_SET);
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <chenillard_classique+0x5c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a14      	ldr	r2, [pc, #80]	@ (800078c <chenillard_classique+0x60>)
 800073a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	4813      	ldr	r0, [pc, #76]	@ (8000790 <chenillard_classique+0x64>)
 8000744:	f001 f93c 	bl	80019c0 <HAL_GPIO_WritePin>
	if (direction) {
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <chenillard_classique+0x68>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00c      	beq.n	800076a <chenillard_classique+0x3e>
		i++;
 8000750:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <chenillard_classique+0x5c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <chenillard_classique+0x5c>)
 8000758:	6013      	str	r3, [r2, #0]
		if (i >= 2) {
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <chenillard_classique+0x5c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	dd0f      	ble.n	8000782 <chenillard_classique+0x56>
			direction = false;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <chenillard_classique+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
	    i--;
	    if (i <= 0) {
	    	direction = true;
	    }
	}
}
 8000768:	e00b      	b.n	8000782 <chenillard_classique+0x56>
	    i--;
 800076a:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <chenillard_classique+0x5c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	4a05      	ldr	r2, [pc, #20]	@ (8000788 <chenillard_classique+0x5c>)
 8000772:	6013      	str	r3, [r2, #0]
	    if (i <= 0) {
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <chenillard_classique+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dc02      	bgt.n	8000782 <chenillard_classique+0x56>
	    	direction = true;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <chenillard_classique+0x68>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000019c 	.word	0x2000019c
 800078c:	080054a8 	.word	0x080054a8
 8000790:	40020400 	.word	0x40020400
 8000794:	20000008 	.word	0x20000008

08000798 <chenillard_int_ext>:

void chenillard_int_ext(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	static uint8_t state = 1;
	reset_led();
 800079c:	f000 f878 	bl	8000890 <reset_led>
	if (state){
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <chenillard_int_ext+0x4c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d005      	beq.n	80007b4 <chenillard_int_ext+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <chenillard_int_ext+0x50>)
 80007ae:	f001 f907 	bl	80019c0 <HAL_GPIO_WritePin>
 80007b2:	e00a      	b.n	80007ca <chenillard_int_ext+0x32>
	} else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <chenillard_int_ext+0x50>)
 80007ba:	f001 f901 	bl	80019c0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <chenillard_int_ext+0x50>)
 80007c6:	f001 f8fb 	bl	80019c0 <HAL_GPIO_WritePin>
    }
	state = !state;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <chenillard_int_ext+0x4c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf0c      	ite	eq
 80007d2:	2301      	moveq	r3, #1
 80007d4:	2300      	movne	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	4b02      	ldr	r3, [pc, #8]	@ (80007e4 <chenillard_int_ext+0x4c>)
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000000c 	.word	0x2000000c
 80007e8:	40020400 	.word	0x40020400

080007ec <chenillard_on_off>:

void chenillard_on_off(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	e00a      	b.n	800080e <chenillard_on_off+0x22>
		HAL_GPIO_TogglePin(GPIOB, leds[i]);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <chenillard_on_off+0x34>)
 80007fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000800:	4619      	mov	r1, r3
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <chenillard_on_off+0x38>)
 8000804:	f001 f8f5 	bl	80019f2 <HAL_GPIO_TogglePin>
	for (uint8_t i = 0; i < 3; i++){
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	3301      	adds	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d9f1      	bls.n	80007f8 <chenillard_on_off+0xc>
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	080054a8 	.word	0x080054a8
 8000824:	40020400 	.word	0x40020400

08000828 <set_chenillard_frequency>:

void set_chenillard_frequency(uint8_t freq) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
    HAL_TIM_Base_Stop_IT(&htim1);
 8000832:	4813      	ldr	r0, [pc, #76]	@ (8000880 <set_chenillard_frequency+0x58>)
 8000834:	f002 fa42 	bl	8002cbc <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 8000838:	4812      	ldr	r0, [pc, #72]	@ (8000884 <set_chenillard_frequency+0x5c>)
 800083a:	f002 fa3f 	bl	8002cbc <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim4);
 800083e:	4812      	ldr	r0, [pc, #72]	@ (8000888 <set_chenillard_frequency+0x60>)
 8000840:	f002 fa3c 	bl	8002cbc <HAL_TIM_Base_Stop_IT>

    current_frequency = freq;
 8000844:	4a11      	ldr	r2, [pc, #68]	@ (800088c <set_chenillard_frequency+0x64>)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	7013      	strb	r3, [r2, #0]

    switch(freq) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d00e      	beq.n	800086e <set_chenillard_frequency+0x46>
 8000850:	2b03      	cmp	r3, #3
 8000852:	dc10      	bgt.n	8000876 <set_chenillard_frequency+0x4e>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d002      	beq.n	800085e <set_chenillard_frequency+0x36>
 8000858:	2b02      	cmp	r3, #2
 800085a:	d004      	beq.n	8000866 <set_chenillard_frequency+0x3e>
        	break;
        case 3:
        	HAL_TIM_Base_Start_IT(&htim4);
        	break;
    }
}
 800085c:	e00b      	b.n	8000876 <set_chenillard_frequency+0x4e>
        	HAL_TIM_Base_Start_IT(&htim1);
 800085e:	4808      	ldr	r0, [pc, #32]	@ (8000880 <set_chenillard_frequency+0x58>)
 8000860:	f002 f9b4 	bl	8002bcc <HAL_TIM_Base_Start_IT>
        	break;
 8000864:	e007      	b.n	8000876 <set_chenillard_frequency+0x4e>
        	HAL_TIM_Base_Start_IT(&htim3);
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <set_chenillard_frequency+0x5c>)
 8000868:	f002 f9b0 	bl	8002bcc <HAL_TIM_Base_Start_IT>
        	break;
 800086c:	e003      	b.n	8000876 <set_chenillard_frequency+0x4e>
        	HAL_TIM_Base_Start_IT(&htim4);
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <set_chenillard_frequency+0x60>)
 8000870:	f002 f9ac 	bl	8002bcc <HAL_TIM_Base_Start_IT>
        	break;
 8000874:	bf00      	nop
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001a4 	.word	0x200001a4
 8000884:	200001f0 	.word	0x200001f0
 8000888:	2000023c 	.word	0x2000023c
 800088c:	20000001 	.word	0x20000001

08000890 <reset_led>:


void reset_led(){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++){
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	e00b      	b.n	80008b4 <reset_led+0x24>
		HAL_GPIO_WritePin(GPIOB, leds[i], GPIO_PIN_RESET);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <reset_led+0x34>)
 80008a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <reset_led+0x38>)
 80008aa:	f001 f889 	bl	80019c0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++){
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3301      	adds	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d9f0      	bls.n	800089c <reset_led+0xc>
	}
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	080054a8 	.word	0x080054a8
 80008c8:	40020400 	.word	0x40020400

080008cc <led_on_off>:

void led_on_off(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	char last = rx_buffer[strlen(rx_buffer)-1];
 80008d2:	4814      	ldr	r0, [pc, #80]	@ (8000924 <led_on_off+0x58>)
 80008d4:	f7ff fc98 	bl	8000208 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	3b01      	subs	r3, #1
 80008dc:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <led_on_off+0x58>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	71fb      	strb	r3, [r7, #7]
	if (last == 'F') { //LED OFF
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b46      	cmp	r3, #70	@ 0x46
 80008e6:	d10b      	bne.n	8000900 <led_on_off+0x34>
		HAL_GPIO_WritePin(GPIOB, leds[(int)(rx_buffer[3] - '0')-1], GPIO_PIN_RESET);
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <led_on_off+0x58>)
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	3b31      	subs	r3, #49	@ 0x31
 80008ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000928 <led_on_off+0x5c>)
 80008f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <led_on_off+0x60>)
 80008fa:	f001 f861 	bl	80019c0 <HAL_GPIO_WritePin>
	} else if (last == 'N'){//LED ON
		HAL_GPIO_WritePin(GPIOB, leds[(int)(rx_buffer[3] - '0')-1], GPIO_PIN_SET);
	}
}
 80008fe:	e00d      	b.n	800091c <led_on_off+0x50>
	} else if (last == 'N'){//LED ON
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b4e      	cmp	r3, #78	@ 0x4e
 8000904:	d10a      	bne.n	800091c <led_on_off+0x50>
		HAL_GPIO_WritePin(GPIOB, leds[(int)(rx_buffer[3] - '0')-1], GPIO_PIN_SET);
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <led_on_off+0x58>)
 8000908:	78db      	ldrb	r3, [r3, #3]
 800090a:	3b31      	subs	r3, #49	@ 0x31
 800090c:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <led_on_off+0x5c>)
 800090e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <led_on_off+0x60>)
 8000918:	f001 f852 	bl	80019c0 <HAL_GPIO_WritePin>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000098 	.word	0x20000098
 8000928:	080054a8 	.word	0x080054a8
 800092c:	40020400 	.word	0x40020400

08000930 <manage_chenillard>:

void manage_chenillard(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	char last = rx_buffer[strlen(rx_buffer) - 1];
 8000936:	4817      	ldr	r0, [pc, #92]	@ (8000994 <manage_chenillard+0x64>)
 8000938:	f7ff fc66 	bl	8000208 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	3b01      	subs	r3, #1
 8000940:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <manage_chenillard+0x64>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	71fb      	strb	r3, [r7, #7]
	if ( last == 'N'){
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b4e      	cmp	r3, #78	@ 0x4e
 800094a:	d110      	bne.n	800096e <manage_chenillard+0x3e>
		reset_led();
 800094c:	f7ff ffa0 	bl	8000890 <reset_led>
		current_pattern = rx_buffer[10] - '0';
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <manage_chenillard+0x64>)
 8000952:	7a9b      	ldrb	r3, [r3, #10]
 8000954:	3b30      	subs	r3, #48	@ 0x30
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <manage_chenillard+0x68>)
 800095a:	701a      	strb	r2, [r3, #0]
		chenillard_actif = true;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <manage_chenillard+0x6c>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
		set_chenillard_frequency(current_frequency);
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <manage_chenillard+0x70>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff5e 	bl	8000828 <set_chenillard_frequency>
		if(rx_buffer[10] - '0' == current_pattern){
			chenillard_actif = false;
			reset_led();
		}
	}
}
 800096c:	e00e      	b.n	800098c <manage_chenillard+0x5c>
	} else if(last == 'F'){
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b46      	cmp	r3, #70	@ 0x46
 8000972:	d10b      	bne.n	800098c <manage_chenillard+0x5c>
		if(rx_buffer[10] - '0' == current_pattern){
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <manage_chenillard+0x64>)
 8000976:	7a9b      	ldrb	r3, [r3, #10]
 8000978:	3b30      	subs	r3, #48	@ 0x30
 800097a:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <manage_chenillard+0x68>)
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	4293      	cmp	r3, r2
 8000980:	d104      	bne.n	800098c <manage_chenillard+0x5c>
			chenillard_actif = false;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <manage_chenillard+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
			reset_led();
 8000988:	f7ff ff82 	bl	8000890 <reset_led>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000098 	.word	0x20000098
 8000998:	20000000 	.word	0x20000000
 800099c:	20000094 	.word	0x20000094
 80009a0:	20000001 	.word	0x20000001

080009a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART3) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a68 <HAL_UART_RxCpltCallback+0xc4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d154      	bne.n	8000a60 <HAL_UART_RxCpltCallback+0xbc>
		 if (ch == '\r' || ch == '\n') {
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <HAL_UART_RxCpltCallback+0xc8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b0d      	cmp	r3, #13
 80009bc:	d003      	beq.n	80009c6 <HAL_UART_RxCpltCallback+0x22>
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <HAL_UART_RxCpltCallback+0xc8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b0a      	cmp	r3, #10
 80009c4:	d13d      	bne.n	8000a42 <HAL_UART_RxCpltCallback+0x9e>
			 *ptr = '\0';
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <HAL_UART_RxCpltCallback+0xcc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]

			 if (rx_buffer[0] == 'L'){ //Controle des LED
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b4c      	cmp	r3, #76	@ 0x4c
 80009d4:	d109      	bne.n	80009ea <HAL_UART_RxCpltCallback+0x46>
				 if (chenillard_actif){
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <HAL_UART_RxCpltCallback+0xd4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <HAL_UART_RxCpltCallback+0x40>
					 printf("LED Control OFF, disable chenillard first\r\n");
 80009de:	4827      	ldr	r0, [pc, #156]	@ (8000a7c <HAL_UART_RxCpltCallback+0xd8>)
 80009e0:	f004 f988 	bl	8004cf4 <puts>
				 }
				 led_on_off();
 80009e4:	f7ff ff72 	bl	80008cc <led_on_off>
 80009e8:	e01e      	b.n	8000a28 <HAL_UART_RxCpltCallback+0x84>
			 } else if (strncmp(rx_buffer, "CHENILLARD FREQUENCE", 20) == 0){ //Frequence
 80009ea:	2214      	movs	r2, #20
 80009ec:	4924      	ldr	r1, [pc, #144]	@ (8000a80 <HAL_UART_RxCpltCallback+0xdc>)
 80009ee:	4821      	ldr	r0, [pc, #132]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 80009f0:	f004 fa68 	bl	8004ec4 <strncmp>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10c      	bne.n	8000a14 <HAL_UART_RxCpltCallback+0x70>
				 set_chenillard_frequency((uint8_t)(rx_buffer[strlen(rx_buffer)-1] - '0'));
 80009fa:	481e      	ldr	r0, [pc, #120]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 80009fc:	f7ff fc04 	bl	8000208 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	3b01      	subs	r3, #1
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a06:	5cd3      	ldrb	r3, [r2, r3]
 8000a08:	3b30      	subs	r3, #48	@ 0x30
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff0b 	bl	8000828 <set_chenillard_frequency>
 8000a12:	e009      	b.n	8000a28 <HAL_UART_RxCpltCallback+0x84>
			 } else if (strncmp(rx_buffer, "CHENILLARD", 10) == 0) { //Chenillard
 8000a14:	220a      	movs	r2, #10
 8000a16:	491b      	ldr	r1, [pc, #108]	@ (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a18:	4816      	ldr	r0, [pc, #88]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a1a:	f004 fa53 	bl	8004ec4 <strncmp>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <HAL_UART_RxCpltCallback+0x84>
				 manage_chenillard();
 8000a24:	f7ff ff84 	bl	8000930 <manage_chenillard>
			 }
			 memset(rx_buffer, 0, strlen(rx_buffer));
 8000a28:	4812      	ldr	r0, [pc, #72]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a2a:	f7ff fbed 	bl	8000208 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a36:	f004 fa3d 	bl	8004eb4 <memset>
			 ptr = rx_buffer;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <HAL_UART_RxCpltCallback+0xcc>)
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e009      	b.n	8000a56 <HAL_UART_RxCpltCallback+0xb2>
		 } else {
	         *ptr = ch;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <HAL_UART_RxCpltCallback+0xcc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_UART_RxCpltCallback+0xc8>)
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	701a      	strb	r2, [r3, #0]
	         ptr++;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_UART_RxCpltCallback+0xcc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_UART_RxCpltCallback+0xcc>)
 8000a54:	6013      	str	r3, [r2, #0]
		 }
	     HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	4904      	ldr	r1, [pc, #16]	@ (8000a6c <HAL_UART_RxCpltCallback+0xc8>)
 8000a5a:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <HAL_UART_RxCpltCallback+0xe4>)
 8000a5c:	f002 fe1f 	bl	800369e <HAL_UART_Receive_IT>
	 }
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	20000198 	.word	0x20000198
 8000a70:	20000004 	.word	0x20000004
 8000a74:	20000098 	.word	0x20000098
 8000a78:	20000094 	.word	0x20000094
 8000a7c:	08005458 	.word	0x08005458
 8000a80:	08005484 	.word	0x08005484
 8000a84:	0800549c 	.word	0x0800549c
 8000a88:	20000288 	.word	0x20000288

08000a8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a9e:	f000 fcd9 	bl	8001454 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aae:	231f      	movs	r3, #31
 8000ab0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ab2:	2387      	movs	r3, #135	@ 0x87
 8000ab4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aba:	2300      	movs	r3, #0
 8000abc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fcf7 	bl	80014c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ad6:	2004      	movs	r0, #4
 8000ad8:	f000 fcd4 	bl	8001484 <HAL_MPU_Enable>

}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 fb2f 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b9e:	f002 f8bc 	bl	8002d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001a4 	.word	0x200001a4

08000bac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <TIM3_IRQHandler+0x10>)
 8000bb2:	f002 f8b2 	bl	8002d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001f0 	.word	0x200001f0

08000bc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <TIM4_IRQHandler+0x10>)
 8000bc6:	f002 f8a8 	bl	8002d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000023c 	.word	0x2000023c

08000bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <USART3_IRQHandler+0x10>)
 8000bda:	f002 fda5 	bl	8003728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000288 	.word	0x20000288

08000be8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00a      	b.n	8000c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfa:	f3af 8000 	nop.w
 8000bfe:	4601      	mov	r1, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	b2ca      	uxtb	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf0      	blt.n	8000bfa <_read+0x12>
  }

  return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e009      	b.n	8000c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fcc1 	bl	80005c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf1      	blt.n	8000c34 <_write+0x12>
  }
  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:

int _close(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c82:	605a      	str	r2, [r3, #4]
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_isatty>:

int _isatty(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f004 f93e 	bl	8004f74 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20050000 	.word	0x20050000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200001a0 	.word	0x200001a0
 8000d2c:	20000460 	.word	0x20000460

08000d30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d74:	4a20      	ldr	r2, [pc, #128]	@ (8000df8 <MX_TIM1_Init+0xa4>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d7a:	227f      	movs	r2, #127	@ 0x7f
 8000d7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d9e:	4815      	ldr	r0, [pc, #84]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000da0:	f001 febc 	bl	8002b1c <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000daa:	f7ff fe9b 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000dbc:	f002 f8b4 	bl	8002f28 <HAL_TIM_ConfigClockSource>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000dc6:	f7ff fe8d 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_TIM1_Init+0xa0>)
 8000ddc:	f002 fadc 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000de6:	f7ff fe7d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001a4 	.word	0x200001a4
 8000df8:	40010000 	.word	0x40010000

08000dfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e94 <MX_TIM3_Init+0x98>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 255;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e22:	22ff      	movs	r2, #255	@ 0xff
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e42:	f001 fe6b 	bl	8002b1c <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e4c:	f7ff fe4a 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e5e:	f002 f863 	bl	8002f28 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e68:	f7ff fe3c 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_TIM3_Init+0x94>)
 8000e7a:	f002 fa8d 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f7ff fe2e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001f0 	.word	0x200001f0
 8000e94:	40000400 	.word	0x40000400

08000e98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <MX_TIM4_Init+0x9c>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 735;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000ebe:	f240 22df 	movw	r2, #735	@ 0x2df
 8000ec2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000ecc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ed0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ede:	4814      	ldr	r0, [pc, #80]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000ee0:	f001 fe1c 	bl	8002b1c <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000eea:	f7ff fdfb 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000efc:	f002 f814 	bl	8002f28 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000f06:	f7ff fded 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <MX_TIM4_Init+0x98>)
 8000f18:	f002 fa3e 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000f22:	f7ff fddf 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000023c 	.word	0x2000023c
 8000f34:	40000800 	.word	0x40000800

08000f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <HAL_TIM_Base_MspInit+0xac>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d114      	bne.n	8000f74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4a:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a26      	ldr	r2, [pc, #152]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2019      	movs	r0, #25
 8000f68:	f000 fa3d 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f6c:	2019      	movs	r0, #25
 8000f6e:	f000 fa56 	bl	800141e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f72:	e032      	b.n	8000fda <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <HAL_TIM_Base_MspInit+0xb4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d114      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	201d      	movs	r0, #29
 8000f9c:	f000 fa23 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fa0:	201d      	movs	r0, #29
 8000fa2:	f000 fa3c 	bl	800141e <HAL_NVIC_EnableIRQ>
}
 8000fa6:	e018      	b.n	8000fda <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <HAL_TIM_Base_MspInit+0xb8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d113      	bne.n	8000fda <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	201e      	movs	r0, #30
 8000fd0:	f000 fa09 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fd4:	201e      	movs	r0, #30
 8000fd6:	f000 fa22 	bl	800141e <HAL_NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40000800 	.word	0x40000800

08000ff4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8000ffa:	4a15      	ldr	r2, [pc, #84]	@ (8001050 <MX_USART3_UART_Init+0x5c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_USART3_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_USART3_UART_Init+0x58>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <MX_USART3_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_USART3_UART_Init+0x58>)
 8001038:	f002 fa5a 	bl	80034f0 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001042:	f7ff fd4f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000288 	.word	0x20000288
 8001050:	40004800 	.word	0x40004800

08001054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0aa      	sub	sp, #168	@ 0xa8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2284      	movs	r2, #132	@ 0x84
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f003 ff1d 	bl	8004eb4 <memset>
  if(uartHandle->Instance==USART3)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a26      	ldr	r2, [pc, #152]	@ (8001118 <HAL_UART_MspInit+0xc4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d144      	bne.n	800110e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001088:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f952 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800109e:	f7ff fd21 	bl	8000ae4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a17      	ldr	r2, [pc, #92]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ec:	2307      	movs	r3, #7
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <HAL_UART_MspInit+0xcc>)
 80010fa:	f000 fab5 	bl	8001668 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2027      	movs	r0, #39	@ 0x27
 8001104:	f000 f96f 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001108:	2027      	movs	r0, #39	@ 0x27
 800110a:	f000 f988 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	37a8      	adds	r7, #168	@ 0xa8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004800 	.word	0x40004800
 800111c:	40023800 	.word	0x40023800
 8001120:	40020c00 	.word	0x40020c00

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800115c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001128:	f7ff fe02 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	@ (8001164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	@ (8001170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 ff15 	bl	8004f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fa47 	bl	80005e8 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001168:	080054d8 	.word	0x080054d8
  ldr r2, =_sbss
 800116c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001170:	20000460 	.word	0x20000460

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>

08001176 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f928 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001180:	200f      	movs	r0, #15
 8001182:	f000 f805 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fcb3 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f943 	bl	800143a <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 f90b 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	@ (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000010 	.word	0x20000010
 80011e8:	20000018 	.word	0x20000018
 80011ec:	20000014 	.word	0x20000014

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000018 	.word	0x20000018
 8001214:	20000310 	.word	0x20000310

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000310 	.word	0x20000310

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <__NVIC_SetPriorityGrouping+0x40>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	4313      	orrs	r3, r2
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <__NVIC_SetPriorityGrouping+0x40>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	05fa0000 	.word	0x05fa0000

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	@ (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001458:	f3bf 8f5f 	dmb	sy
}
 800145c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <HAL_MPU_Disable+0x28>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	4a06      	ldr	r2, [pc, #24]	@ (800147c <HAL_MPU_Disable+0x28>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001468:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_MPU_Disable+0x2c>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000ed90 	.word	0xe000ed90

08001484 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_MPU_Enable+0x38>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_MPU_Enable+0x3c>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <HAL_MPU_Enable+0x3c>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a8:	f3bf 8f6f 	isb	sy
}
 80014ac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed90 	.word	0xe000ed90
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785a      	ldrb	r2, [r3, #1]
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014e0:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7b1b      	ldrb	r3, [r3, #12]
 80014ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7adb      	ldrb	r3, [r3, #11]
 80014f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a9b      	ldrb	r3, [r3, #10]
 80014fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7b5b      	ldrb	r3, [r3, #13]
 8001502:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b9b      	ldrb	r3, [r3, #14]
 800150a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800150c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7bdb      	ldrb	r3, [r3, #15]
 8001512:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001514:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7a5b      	ldrb	r3, [r3, #9]
 800151a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800151c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001524:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800152e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001530:	6113      	str	r3, [r2, #16]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed90 	.word	0xe000ed90

08001544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001552:	f7ff fe61 	bl	8001218 <HAL_GetTick>
 8001556:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2280      	movs	r2, #128	@ 0x80
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e052      	b.n	800161c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0216 	bic.w	r2, r2, #22
 8001584:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001594:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <HAL_DMA_Abort+0x62>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0208 	bic.w	r2, r2, #8
 80015b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c6:	e013      	b.n	80015f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015c8:	f7ff fe26 	bl	8001218 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d90c      	bls.n	80015f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2220      	movs	r2, #32
 80015da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e015      	b.n	800161c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e4      	bne.n	80015c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	223f      	movs	r2, #63	@ 0x3f
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d004      	beq.n	8001642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00c      	b.n	800165c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e175      	b.n	8001974 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8164 	bne.w	800196e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x56>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80be 	beq.w	800196e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b66      	ldr	r3, [pc, #408]	@ (800198c <HAL_GPIO_Init+0x324>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a65      	ldr	r2, [pc, #404]	@ (800198c <HAL_GPIO_Init+0x324>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <HAL_GPIO_Init+0x324>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800180a:	4a61      	ldr	r2, [pc, #388]	@ (8001990 <HAL_GPIO_Init+0x328>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a58      	ldr	r2, [pc, #352]	@ (8001994 <HAL_GPIO_Init+0x32c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d037      	beq.n	80018a6 <HAL_GPIO_Init+0x23e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a57      	ldr	r2, [pc, #348]	@ (8001998 <HAL_GPIO_Init+0x330>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d031      	beq.n	80018a2 <HAL_GPIO_Init+0x23a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a56      	ldr	r2, [pc, #344]	@ (800199c <HAL_GPIO_Init+0x334>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d02b      	beq.n	800189e <HAL_GPIO_Init+0x236>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a55      	ldr	r2, [pc, #340]	@ (80019a0 <HAL_GPIO_Init+0x338>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x232>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a54      	ldr	r2, [pc, #336]	@ (80019a4 <HAL_GPIO_Init+0x33c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a53      	ldr	r2, [pc, #332]	@ (80019a8 <HAL_GPIO_Init+0x340>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x22a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	@ (80019ac <HAL_GPIO_Init+0x344>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x226>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a51      	ldr	r2, [pc, #324]	@ (80019b0 <HAL_GPIO_Init+0x348>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x222>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a50      	ldr	r2, [pc, #320]	@ (80019b4 <HAL_GPIO_Init+0x34c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x21e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4f      	ldr	r2, [pc, #316]	@ (80019b8 <HAL_GPIO_Init+0x350>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x21a>
 800187e:	2309      	movs	r3, #9
 8001880:	e012      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001882:	230a      	movs	r3, #10
 8001884:	e010      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001886:	2308      	movs	r3, #8
 8001888:	e00e      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800188a:	2307      	movs	r3, #7
 800188c:	e00c      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800188e:	2306      	movs	r3, #6
 8001890:	e00a      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001892:	2305      	movs	r3, #5
 8001894:	e008      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 8001896:	2304      	movs	r3, #4
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800189a:	2303      	movs	r3, #3
 800189c:	e004      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 800189e:	2302      	movs	r3, #2
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x240>
 80018a6:	2300      	movs	r3, #0
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f002 0203 	and.w	r2, r2, #3
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018b8:	4935      	ldr	r1, [pc, #212]	@ (8001990 <HAL_GPIO_Init+0x328>)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_GPIO_Init+0x354>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ea:	4a34      	ldr	r2, [pc, #208]	@ (80019bc <HAL_GPIO_Init+0x354>)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f0:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <HAL_GPIO_Init+0x354>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001914:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <HAL_GPIO_Init+0x354>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191a:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <HAL_GPIO_Init+0x354>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <HAL_GPIO_Init+0x354>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_GPIO_Init+0x354>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001968:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <HAL_GPIO_Init+0x354>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b0f      	cmp	r3, #15
 8001978:	f67f ae86 	bls.w	8001688 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40021800 	.word	0x40021800
 80019b0:	40021c00 	.word	0x40021c00
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40022400 	.word	0x40022400
 80019bc:	40013c00 	.word	0x40013c00

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a04:	887a      	ldrh	r2, [r7, #2]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	041a      	lsls	r2, r3, #16
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	400b      	ands	r3, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e291      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	4b96      	ldr	r3, [pc, #600]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a58:	4b93      	ldr	r3, [pc, #588]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62>
 8001a64:	4b90      	ldr	r3, [pc, #576]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b8d      	ldr	r3, [pc, #564]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x130>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d168      	bne.n	8001b58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e26b      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x7a>
 8001a94:	4b84      	ldr	r3, [pc, #528]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a83      	ldr	r2, [pc, #524]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0xd8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x9c>
 8001aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7e      	ldr	r2, [pc, #504]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7b      	ldr	r2, [pc, #492]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xd8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xc0>
 8001ace:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b73      	ldr	r3, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xd8>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fb86 	bl	8001218 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fb82 	bl	8001218 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e21f      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b61      	ldr	r3, [pc, #388]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe8>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb72 	bl	8001218 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fb6e 	bl	8001218 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e20b      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x110>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d069      	beq.n	8001c3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b66:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x190>
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1df      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	493d      	ldr	r1, [pc, #244]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e040      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fb24 	bl	8001218 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fb20 	bl	8001218 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1bd      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4929      	ldr	r1, [pc, #164]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
 8001c06:	e018      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb00 	bl	8001218 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fafc 	bl	8001218 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e199      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d038      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d019      	beq.n	8001c82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c52:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fadd 	bl	8001218 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c62:	f7ff fad9 	bl	8001218 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e176      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x23a>
 8001c80:	e01a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c86:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <HAL_RCC_OscConfig+0x280>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fac3 	bl	8001218 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fabf 	bl	8001218 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d903      	bls.n	8001cac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e15c      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
 8001ca8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	4b91      	ldr	r3, [pc, #580]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80a4 	beq.w	8001e0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b88      	ldr	r3, [pc, #544]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a87      	ldr	r2, [pc, #540]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b85      	ldr	r3, [pc, #532]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	2301      	movs	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cee:	4b82      	ldr	r3, [pc, #520]	@ (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fa87 	bl	8001218 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff fa83 	bl	8001218 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	@ 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e120      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x31a>
 8001d34:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d40:	e02d      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x33c>
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4e:	4a69      	ldr	r2, [pc, #420]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d56:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5a:	4a66      	ldr	r2, [pc, #408]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d62:	e01c      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d10c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x35e>
 8001d6c:	4b61      	ldr	r3, [pc, #388]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d70:	4a60      	ldr	r2, [pc, #384]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d78:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d84:	e00b      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
 8001d86:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d92:	4b58      	ldr	r3, [pc, #352]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d96:	4a57      	ldr	r2, [pc, #348]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d015      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff fa37 	bl	8001218 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fa33 	bl	8001218 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0ce      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ee      	beq.n	8001dae <HAL_RCC_OscConfig+0x386>
 8001dd0:	e014      	b.n	8001dfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fa21 	bl	8001218 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff fa1d 	bl	8001218 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0b8      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	4b40      	ldr	r3, [pc, #256]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ee      	bne.n	8001dda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a4 	beq.w	8001f60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	4b36      	ldr	r3, [pc, #216]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d06b      	beq.n	8001efc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d149      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a30      	ldr	r2, [pc, #192]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f9ee 	bl	8001218 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff f9ea 	bl	8001218 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e087      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4313      	orrs	r3, r2
 8001e84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9be 	bl	8001218 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f9ba 	bl	8001218 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e057      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x478>
 8001ebe:	e04f      	b.n	8001f60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f9a4 	bl	8001218 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f9a0 	bl	8001218 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e03d      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4ac>
 8001ef2:	e035      	b.n	8001f60 <HAL_RCC_OscConfig+0x538>
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_RCC_OscConfig+0x544>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d028      	beq.n	8001f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d121      	bne.n	8001f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0d0      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b6a      	ldr	r3, [pc, #424]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b67      	ldr	r3, [pc, #412]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	4965      	ldr	r1, [pc, #404]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a52      	ldr	r2, [pc, #328]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d040      	beq.n	8002094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e073      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06b      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4936      	ldr	r1, [pc, #216]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002064:	f7ff f8d8 	bl	8001218 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7ff f8d4 	bl	8001218 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e053      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d210      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	4922      	ldr	r1, [pc, #136]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	@ (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_ClockConfig+0x1d4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f834 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00
 8002138:	40023800 	.word	0x40023800
 800213c:	080054b0 	.word	0x080054b0
 8002140:	20000010 	.word	0x20000010
 8002144:	20000014 	.word	0x20000014

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800214c:	b090      	sub	sp, #64	@ 0x40
 800214e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
 8002154:	2300      	movs	r3, #0
 8002156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002160:	4b59      	ldr	r3, [pc, #356]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d00d      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x40>
 800216c:	2b08      	cmp	r3, #8
 800216e:	f200 80a1 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x3a>
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b53      	ldr	r3, [pc, #332]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x184>)
 800217e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002180:	e09b      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002184:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002186:	e098      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002192:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d028      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	2200      	movs	r2, #0
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021b0:	2100      	movs	r1, #0
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b4:	fb03 f201 	mul.w	r2, r3, r1
 80021b8:	2300      	movs	r3, #0
 80021ba:	fb00 f303 	mul.w	r3, r0, r3
 80021be:	4413      	add	r3, r2
 80021c0:	4a43      	ldr	r2, [pc, #268]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021c2:	fba0 1202 	umull	r1, r2, r0, r2
 80021c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c8:	460a      	mov	r2, r1
 80021ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ce:	4413      	add	r3, r2
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d4:	2200      	movs	r2, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	61fa      	str	r2, [r7, #28]
 80021da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021e2:	f7fe f819 	bl	8000218 <__aeabi_uldivmod>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4613      	mov	r3, r2
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ee:	e053      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f0:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	2200      	movs	r2, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	617a      	str	r2, [r7, #20]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002202:	f04f 0b00 	mov.w	fp, #0
 8002206:	4652      	mov	r2, sl
 8002208:	465b      	mov	r3, fp
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	ebb2 080a 	subs.w	r8, r2, sl
 8002222:	eb63 090b 	sbc.w	r9, r3, fp
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002232:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002236:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800223a:	ebb2 0408 	subs.w	r4, r2, r8
 800223e:	eb63 0509 	sbc.w	r5, r3, r9
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	00eb      	lsls	r3, r5, #3
 800224c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002250:	00e2      	lsls	r2, r4, #3
 8002252:	4614      	mov	r4, r2
 8002254:	461d      	mov	r5, r3
 8002256:	eb14 030a 	adds.w	r3, r4, sl
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	eb45 030b 	adc.w	r3, r5, fp
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226e:	4629      	mov	r1, r5
 8002270:	028b      	lsls	r3, r1, #10
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002278:	4621      	mov	r1, r4
 800227a:	028a      	lsls	r2, r1, #10
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002282:	2200      	movs	r2, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	60fa      	str	r2, [r7, #12]
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fd ffc4 	bl	8000218 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	3301      	adds	r3, #1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x184>)
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3740      	adds	r7, #64	@ 0x40
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	017d7840 	.word	0x017d7840

080022d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000010 	.word	0x20000010

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	080054c0 	.word	0x080054c0

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffdc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0b5b      	lsrs	r3, r3, #13
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	080054c0 	.word	0x080054c0

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d012      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002364:	4b69      	ldr	r3, [pc, #420]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a68      	ldr	r2, [pc, #416]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800236e:	6093      	str	r3, [r2, #8]
 8002370:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	4964      	ldr	r1, [pc, #400]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002396:	4b5d      	ldr	r3, [pc, #372]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	4959      	ldr	r1, [pc, #356]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023b4:	d101      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d2:	4b4e      	ldr	r3, [pc, #312]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	494a      	ldr	r1, [pc, #296]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f0:	d101      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 808b 	beq.w	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b3a      	ldr	r3, [pc, #232]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	4a39      	ldr	r2, [pc, #228]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	@ 0x40
 800242c:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002438:	4b35      	ldr	r3, [pc, #212]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a34      	ldr	r2, [pc, #208]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fee8 	bl	8001218 <HAL_GetTick>
 8002448:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244c:	f7fe fee4 	bl	8001218 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e357      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800245e:	4b2c      	ldr	r3, [pc, #176]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800246a:	4b28      	ldr	r3, [pc, #160]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002472:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d035      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d02e      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002488:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002490:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002492:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002496:	4a1d      	ldr	r2, [pc, #116]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024aa:	4a18      	ldr	r2, [pc, #96]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d114      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe feac 	bl	8001218 <HAL_GetTick>
 80024c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	e00a      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7fe fea8 	bl	8001218 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e319      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ee      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024f2:	d111      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002502:	400b      	ands	r3, r1
 8002504:	4901      	ldr	r1, [pc, #4]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
 800250a:	e00b      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000
 8002514:	0ffffcff 	.word	0x0ffffcff
 8002518:	4baa      	ldr	r3, [pc, #680]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4aa9      	ldr	r2, [pc, #676]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002522:	6093      	str	r3, [r2, #8]
 8002524:	4ba7      	ldr	r3, [pc, #668]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002526:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	49a4      	ldr	r1, [pc, #656]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002532:	4313      	orrs	r3, r2
 8002534:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002542:	4ba0      	ldr	r3, [pc, #640]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002548:	4a9e      	ldr	r2, [pc, #632]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800254e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002552:	4b9c      	ldr	r3, [pc, #624]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002554:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	4999      	ldr	r1, [pc, #612]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002570:	4b94      	ldr	r3, [pc, #592]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800257e:	4991      	ldr	r1, [pc, #580]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002592:	4b8c      	ldr	r3, [pc, #560]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a0:	4988      	ldr	r1, [pc, #544]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b4:	4b83      	ldr	r3, [pc, #524]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c2:	4980      	ldr	r1, [pc, #512]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025d6:	4b7b      	ldr	r3, [pc, #492]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4977      	ldr	r1, [pc, #476]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f8:	4b72      	ldr	r3, [pc, #456]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	496f      	ldr	r1, [pc, #444]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261a:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	f023 020c 	bic.w	r2, r3, #12
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002628:	4966      	ldr	r1, [pc, #408]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800263c:	4b61      	ldr	r3, [pc, #388]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	495e      	ldr	r1, [pc, #376]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800265e:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266c:	4955      	ldr	r1, [pc, #340]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002686:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026a2:	4b48      	ldr	r3, [pc, #288]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4944      	ldr	r1, [pc, #272]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026c4:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	493c      	ldr	r1, [pc, #240]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026e6:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f4:	4933      	ldr	r1, [pc, #204]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002716:	492b      	ldr	r1, [pc, #172]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800272a:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002730:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002738:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	4912      	ldr	r1, [pc, #72]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800278c:	4b0d      	ldr	r3, [pc, #52]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800279c:	4909      	ldr	r1, [pc, #36]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d006      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d9 	beq.w	800296a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027b8:	4b02      	ldr	r3, [pc, #8]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a01      	ldr	r2, [pc, #4]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027c2:	e001      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ca:	f7fe fd25 	bl	8001218 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027d2:	f7fe fd21 	bl	8001218 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	@ 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e194      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d021      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11d      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002804:	4b64      	ldr	r3, [pc, #400]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002812:	4b61      	ldr	r3, [pc, #388]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002818:	0e1b      	lsrs	r3, r3, #24
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	019a      	lsls	r2, r3, #6
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	071b      	lsls	r3, r3, #28
 8002838:	4957      	ldr	r1, [pc, #348]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02e      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800286a:	d129      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800286c:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002880:	0f1b      	lsrs	r3, r3, #28
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	019a      	lsls	r2, r3, #6
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	071b      	lsls	r3, r3, #28
 80028a0:	493d      	ldr	r1, [pc, #244]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ae:	f023 021f 	bic.w	r2, r3, #31
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	3b01      	subs	r3, #1
 80028b8:	4937      	ldr	r1, [pc, #220]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01d      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028cc:	4b32      	ldr	r3, [pc, #200]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d2:	0e1b      	lsrs	r3, r3, #24
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028da:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e0:	0f1b      	lsrs	r3, r3, #28
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	019a      	lsls	r2, r3, #6
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	431a      	orrs	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	071b      	lsls	r3, r3, #28
 8002900:	4925      	ldr	r1, [pc, #148]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d011      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	019a      	lsls	r2, r3, #6
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	071b      	lsls	r3, r3, #28
 8002930:	4919      	ldr	r1, [pc, #100]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a16      	ldr	r2, [pc, #88]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002944:	f7fe fc68 	bl	8001218 <HAL_GetTick>
 8002948:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800294c:	f7fe fc64 	bl	8001218 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	@ 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0d7      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 80cd 	bne.w	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297e:	f7fe fc4b 	bl	8001218 <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002986:	f7fe fc47 	bl	8001218 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	@ 0x64
 8002992:	d903      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0ba      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002998:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800299c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a8:	d0ed      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02e      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d12a      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029d2:	4b51      	ldr	r3, [pc, #324]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	0f1b      	lsrs	r3, r3, #28
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	019a      	lsls	r2, r3, #6
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	061b      	lsls	r3, r3, #24
 8002a00:	431a      	orrs	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	071b      	lsls	r3, r3, #28
 8002a06:	4944      	ldr	r1, [pc, #272]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a0e:	4b42      	ldr	r3, [pc, #264]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	493d      	ldr	r1, [pc, #244]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d022      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a3c:	d11d      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a3e:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a44:	0e1b      	lsrs	r3, r3, #24
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a4c:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	0f1b      	lsrs	r3, r3, #28
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	019a      	lsls	r2, r3, #6
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	071b      	lsls	r3, r3, #28
 8002a72:	4929      	ldr	r1, [pc, #164]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d028      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8c:	0e1b      	lsrs	r3, r3, #24
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a94:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9a:	0c1b      	lsrs	r3, r3, #16
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	019a      	lsls	r2, r3, #6
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	431a      	orrs	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	071b      	lsls	r3, r3, #28
 8002aba:	4917      	ldr	r1, [pc, #92]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	4911      	ldr	r1, [pc, #68]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fb98 	bl	8001218 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aec:	f7fe fb94 	bl	8001218 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e007      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0a:	d1ef      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e049      	b.n	8002bc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe f9f8 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fad6 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e054      	b.n	8002c8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0e:	d01d      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	@ (8002ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <HAL_TIM_Base_Start_IT+0xe0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d115      	bne.n	8002c78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_TIM_Base_Start_IT+0xec>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d015      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0xbe>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d011      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c76:	e008      	b.n	8002c8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e000      	b.n	8002c8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	40000c00 	.word	0x40000c00
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40001800 	.word	0x40001800
 8002cb8:	00010007 	.word	0x00010007

08002cbc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_TIM_Base_Stop_IT+0x48>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_Base_Stop_IT+0x48>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01b      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0202 	mvn.w	r2, #2
 8002d4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f9b3 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 8002d6a:	e005      	b.n	8002d78 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9a5 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9b6 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01b      	beq.n	8002dca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f06f 0204 	mvn.w	r2, #4
 8002d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f98d 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 8002db6:	e005      	b.n	8002dc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f97f 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f990 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01b      	beq.n	8002e16 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0208 	mvn.w	r2, #8
 8002de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f967 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 8002e02:	e005      	b.n	8002e10 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f959 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f96a 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01b      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 0210 	mvn.w	r2, #16
 8002e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2208      	movs	r2, #8
 8002e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f941 	bl	80030d0 <HAL_TIM_IC_CaptureCallback>
 8002e4e:	e005      	b.n	8002e5c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f933 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f944 	bl	80030e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0201 	mvn.w	r2, #1
 8002e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd fc2b 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fb0a 	bl	80034c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fb02 	bl	80034dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8fe 	bl	80030f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0220 	mvn.w	r2, #32
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 faca 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_TIM_ConfigClockSource+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0b4      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x186>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4b56      	ldr	r3, [pc, #344]	@ (80030b8 <HAL_TIM_ConfigClockSource+0x190>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7c:	d03e      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0xd4>
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f82:	f200 8087 	bhi.w	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8a:	f000 8086 	beq.w	800309a <HAL_TIM_ConfigClockSource+0x172>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f92:	d87f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b70      	cmp	r3, #112	@ 0x70
 8002f96:	d01a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xa6>
 8002f98:	2b70      	cmp	r3, #112	@ 0x70
 8002f9a:	d87b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b60      	cmp	r3, #96	@ 0x60
 8002f9e:	d050      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x11a>
 8002fa0:	2b60      	cmp	r3, #96	@ 0x60
 8002fa2:	d877      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b50      	cmp	r3, #80	@ 0x50
 8002fa6:	d03c      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xfa>
 8002fa8:	2b50      	cmp	r3, #80	@ 0x50
 8002faa:	d873      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d058      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x13a>
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d86f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb4:	2b30      	cmp	r3, #48	@ 0x30
 8002fb6:	d064      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb8:	2b30      	cmp	r3, #48	@ 0x30
 8002fba:	d86b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d060      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d867      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05c      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d05a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15a>
 8002fcc:	e062      	b.n	8003094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fde:	f000 f9bb 	bl	8003358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]
      break;
 8002ffa:	e04f      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800300c:	f000 f9a4 	bl	8003358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800301e:	609a      	str	r2, [r3, #8]
      break;
 8003020:	e03c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	461a      	mov	r2, r3
 8003030:	f000 f918 	bl	8003264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2150      	movs	r1, #80	@ 0x50
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f971 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8003040:	e02c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304e:	461a      	mov	r2, r3
 8003050:	f000 f937 	bl	80032c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2160      	movs	r1, #96	@ 0x60
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f961 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8003060:	e01c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	461a      	mov	r2, r3
 8003070:	f000 f8f8 	bl	8003264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2140      	movs	r1, #64	@ 0x40
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f951 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8003080:	e00c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 f948 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8003092:	e003      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e000      	b.n	800309c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800309a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	fffeff88 	.word	0xfffeff88

080030bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a46      	ldr	r2, [pc, #280]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d00f      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a43      	ldr	r2, [pc, #268]	@ (800323c <TIM_Base_SetConfig+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00b      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <TIM_Base_SetConfig+0x134>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a41      	ldr	r2, [pc, #260]	@ (8003244 <TIM_Base_SetConfig+0x138>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a40      	ldr	r2, [pc, #256]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d108      	bne.n	800315e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a35      	ldr	r2, [pc, #212]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02b      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316c:	d027      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a32      	ldr	r2, [pc, #200]	@ (800323c <TIM_Base_SetConfig+0x130>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d023      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <TIM_Base_SetConfig+0x134>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <TIM_Base_SetConfig+0x138>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01b      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2f      	ldr	r2, [pc, #188]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d017      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2e      	ldr	r2, [pc, #184]	@ (800324c <TIM_Base_SetConfig+0x140>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2d      	ldr	r2, [pc, #180]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00f      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <TIM_Base_SetConfig+0x14c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	@ (800325c <TIM_Base_SetConfig+0x150>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a29      	ldr	r2, [pc, #164]	@ (8003260 <TIM_Base_SetConfig+0x154>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a10      	ldr	r2, [pc, #64]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a12      	ldr	r2, [pc, #72]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
  }
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40010400 	.word	0x40010400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	40001800 	.word	0x40001800
 800325c:	40001c00 	.word	0x40001c00
 8003260:	40002000 	.word	0x40002000

08003264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800328e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 030a 	bic.w	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b087      	sub	sp, #28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 0210 	bic.w	r2, r3, #16
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	031b      	lsls	r3, r3, #12
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	f043 0307 	orr.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	431a      	orrs	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e06d      	b.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a30      	ldr	r2, [pc, #192]	@ (8003498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2f      	ldr	r2, [pc, #188]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d108      	bne.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80033ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a20      	ldr	r2, [pc, #128]	@ (8003498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003422:	d01d      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a15      	ldr	r2, [pc, #84]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10c      	bne.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4313      	orrs	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40010000 	.word	0x40010000
 800349c:	40010400 	.word	0x40010400
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40001800 	.word	0x40001800

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e040      	b.n	8003584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fd9e 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	@ 0x24
 800351c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fe4c 	bl	80041d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fbe5 	bl	8003d0c <UART_SetConfig>
 8003542:	4603      	mov	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e01b      	b.n	8003584 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800355a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800356a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fecb 	bl	8004318 <UART_CheckIdleState>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d177      	bne.n	8003694 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_UART_Transmit+0x24>
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e070      	b.n	8003696 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2221      	movs	r2, #33	@ 0x21
 80035c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035c2:	f7fd fe29 	bl	8001218 <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e0:	d108      	bne.n	80035f4 <HAL_UART_Transmit+0x68>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	e003      	b.n	80035fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035fc:	e02f      	b.n	800365e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	2180      	movs	r1, #128	@ 0x80
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fedc 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e03b      	b.n	8003696 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	3302      	adds	r3, #2
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e007      	b.n	800364c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1c9      	bne.n	80035fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	@ 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fea6 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e005      	b.n	8003696 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08a      	sub	sp, #40	@ 0x28
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d132      	bne.n	800371c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_UART_Receive_IT+0x24>
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e02b      	b.n	800371e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d018      	beq.n	800370c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	613b      	str	r3, [r7, #16]
   return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	69f9      	ldr	r1, [r7, #28]
 80036fe:	6a3a      	ldr	r2, [r7, #32]
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	61bb      	str	r3, [r7, #24]
   return(result);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e6      	bne.n	80036da <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	461a      	mov	r2, r3
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fec4 	bl	80044a0 <UART_Start_Receive_IT>
 8003718:	4603      	mov	r3, r0
 800371a:	e000      	b.n	800371e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3728      	adds	r7, #40	@ 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b0ba      	sub	sp, #232	@ 0xe8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800374e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003752:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003756:	4013      	ands	r3, r2
 8003758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800375c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d115      	bne.n	8003790 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00f      	beq.n	8003790 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8297 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
      }
      return;
 800378e:	e291      	b.n	8003cb4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8117 	beq.w	80039c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037aa:	4b85      	ldr	r3, [pc, #532]	@ (80039c0 <HAL_UART_IRQHandler+0x298>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 810a 	beq.w	80039c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d011      	beq.n	80037e4 <HAL_UART_IRQHandler+0xbc>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_UART_IRQHandler+0xec>
 80037f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2202      	movs	r2, #2
 8003802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d011      	beq.n	8003844 <HAL_UART_IRQHandler+0x11c>
 8003820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2204      	movs	r2, #4
 8003832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d017      	beq.n	8003880 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800385c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003860:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2208      	movs	r2, #8
 800386e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003876:	f043 0208 	orr.w	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <HAL_UART_IRQHandler+0x18a>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 81fd 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d005      	beq.n	800390a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003902:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04f      	beq.n	80039aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fe8e 	bl	800462c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d141      	bne.n	80039a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800394a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800394e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1d9      	bne.n	800391e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	2b00      	cmp	r3, #0
 8003970:	d013      	beq.n	800399a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <HAL_UART_IRQHandler+0x29c>)
 8003978:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fe50 	bl	8001624 <HAL_DMA_Abort_IT>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d017      	beq.n	80039ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003994:	4610      	mov	r0, r2
 8003996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00f      	b.n	80039ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9a0 	bl	8003ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00b      	b.n	80039ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f99c 	bl	8003ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e007      	b.n	80039ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f998 	bl	8003ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80039b8:	e17e      	b.n	8003cb8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ba:	bf00      	nop
    return;
 80039bc:	e17c      	b.n	8003cb8 <HAL_UART_IRQHandler+0x590>
 80039be:	bf00      	nop
 80039c0:	04000120 	.word	0x04000120
 80039c4:	080046f5 	.word	0x080046f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 814c 	bne.w	8003c6a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8145 	beq.w	8003c6a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 813e 	beq.w	8003c6a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2210      	movs	r2, #16
 80039f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	f040 80b6 	bne.w	8003b72 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8150 	beq.w	8003cbc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f080 8148 	bcs.w	8003cbc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a40:	f000 8086 	beq.w	8003b50 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1da      	bne.n	8003a44 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ab2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e1      	bne.n	8003a8e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003af0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003af4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003afc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e3      	bne.n	8003aca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b20:	f023 0310 	bic.w	r3, r3, #16
 8003b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e4      	bne.n	8003b10 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd fcfa 	bl	8001544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8c2 	bl	8003cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b70:	e0a4      	b.n	8003cbc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8096 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8091 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e4      	bne.n	8003b9e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	623b      	str	r3, [r7, #32]
   return(result);
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e3      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e4      	bne.n	8003c20 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f846 	bl	8003cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c68:	e02a      	b.n	8003cc0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01c      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
    }
    return;
 8003c92:	e017      	b.n	8003cc4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fd37 	bl	8004720 <UART_EndTransmit_IT>
    return;
 8003cb2:	e008      	b.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cb4:	bf00      	nop
 8003cb6:	e006      	b.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003cb8:	bf00      	nop
 8003cba:	e004      	b.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cbc:	bf00      	nop
 8003cbe:	e002      	b.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003cc4:	bf00      	nop
  }

}
 8003cc6:	37e8      	adds	r7, #232	@ 0xe8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4ba6      	ldr	r3, [pc, #664]	@ (8003fd0 <UART_SetConfig+0x2c4>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6979      	ldr	r1, [r7, #20]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a94      	ldr	r2, [pc, #592]	@ (8003fd4 <UART_SetConfig+0x2c8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d120      	bne.n	8003dca <UART_SetConfig+0xbe>
 8003d88:	4b93      	ldr	r3, [pc, #588]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d816      	bhi.n	8003dc4 <UART_SetConfig+0xb8>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <UART_SetConfig+0x90>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003db9 	.word	0x08003db9
 8003da4:	08003db3 	.word	0x08003db3
 8003da8:	08003dbf 	.word	0x08003dbf
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e150      	b.n	8004054 <UART_SetConfig+0x348>
 8003db2:	2302      	movs	r3, #2
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e14d      	b.n	8004054 <UART_SetConfig+0x348>
 8003db8:	2304      	movs	r3, #4
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e14a      	b.n	8004054 <UART_SetConfig+0x348>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e147      	b.n	8004054 <UART_SetConfig+0x348>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e144      	b.n	8004054 <UART_SetConfig+0x348>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a83      	ldr	r2, [pc, #524]	@ (8003fdc <UART_SetConfig+0x2d0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d132      	bne.n	8003e3a <UART_SetConfig+0x12e>
 8003dd4:	4b80      	ldr	r3, [pc, #512]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d828      	bhi.n	8003e34 <UART_SetConfig+0x128>
 8003de2:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <UART_SetConfig+0xdc>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e1d 	.word	0x08003e1d
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e35 	.word	0x08003e35
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e35 	.word	0x08003e35
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e23 	.word	0x08003e23
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e35 	.word	0x08003e35
 8003e18:	08003e2f 	.word	0x08003e2f
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e118      	b.n	8004054 <UART_SetConfig+0x348>
 8003e22:	2302      	movs	r3, #2
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e115      	b.n	8004054 <UART_SetConfig+0x348>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e112      	b.n	8004054 <UART_SetConfig+0x348>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e10f      	b.n	8004054 <UART_SetConfig+0x348>
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e10c      	b.n	8004054 <UART_SetConfig+0x348>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <UART_SetConfig+0x2d4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d120      	bne.n	8003e86 <UART_SetConfig+0x17a>
 8003e44:	4b64      	ldr	r3, [pc, #400]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e4e:	2b30      	cmp	r3, #48	@ 0x30
 8003e50:	d013      	beq.n	8003e7a <UART_SetConfig+0x16e>
 8003e52:	2b30      	cmp	r3, #48	@ 0x30
 8003e54:	d814      	bhi.n	8003e80 <UART_SetConfig+0x174>
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d009      	beq.n	8003e6e <UART_SetConfig+0x162>
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d810      	bhi.n	8003e80 <UART_SetConfig+0x174>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0x15c>
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x168>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x174>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e0f2      	b.n	8004054 <UART_SetConfig+0x348>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e0ef      	b.n	8004054 <UART_SetConfig+0x348>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e0ec      	b.n	8004054 <UART_SetConfig+0x348>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e0e9      	b.n	8004054 <UART_SetConfig+0x348>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e0e6      	b.n	8004054 <UART_SetConfig+0x348>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a56      	ldr	r2, [pc, #344]	@ (8003fe4 <UART_SetConfig+0x2d8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d120      	bne.n	8003ed2 <UART_SetConfig+0x1c6>
 8003e90:	4b51      	ldr	r3, [pc, #324]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e9c:	d013      	beq.n	8003ec6 <UART_SetConfig+0x1ba>
 8003e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ea0:	d814      	bhi.n	8003ecc <UART_SetConfig+0x1c0>
 8003ea2:	2b80      	cmp	r3, #128	@ 0x80
 8003ea4:	d009      	beq.n	8003eba <UART_SetConfig+0x1ae>
 8003ea6:	2b80      	cmp	r3, #128	@ 0x80
 8003ea8:	d810      	bhi.n	8003ecc <UART_SetConfig+0x1c0>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <UART_SetConfig+0x1a8>
 8003eae:	2b40      	cmp	r3, #64	@ 0x40
 8003eb0:	d006      	beq.n	8003ec0 <UART_SetConfig+0x1b4>
 8003eb2:	e00b      	b.n	8003ecc <UART_SetConfig+0x1c0>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0cc      	b.n	8004054 <UART_SetConfig+0x348>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e0c9      	b.n	8004054 <UART_SetConfig+0x348>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0c6      	b.n	8004054 <UART_SetConfig+0x348>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e0c3      	b.n	8004054 <UART_SetConfig+0x348>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e0c0      	b.n	8004054 <UART_SetConfig+0x348>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a44      	ldr	r2, [pc, #272]	@ (8003fe8 <UART_SetConfig+0x2dc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d125      	bne.n	8003f28 <UART_SetConfig+0x21c>
 8003edc:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eea:	d017      	beq.n	8003f1c <UART_SetConfig+0x210>
 8003eec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ef0:	d817      	bhi.n	8003f22 <UART_SetConfig+0x216>
 8003ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef6:	d00b      	beq.n	8003f10 <UART_SetConfig+0x204>
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003efc:	d811      	bhi.n	8003f22 <UART_SetConfig+0x216>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <UART_SetConfig+0x1fe>
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f06:	d006      	beq.n	8003f16 <UART_SetConfig+0x20a>
 8003f08:	e00b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e0a1      	b.n	8004054 <UART_SetConfig+0x348>
 8003f10:	2302      	movs	r3, #2
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e09e      	b.n	8004054 <UART_SetConfig+0x348>
 8003f16:	2304      	movs	r3, #4
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e09b      	b.n	8004054 <UART_SetConfig+0x348>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e098      	b.n	8004054 <UART_SetConfig+0x348>
 8003f22:	2310      	movs	r3, #16
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e095      	b.n	8004054 <UART_SetConfig+0x348>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003fec <UART_SetConfig+0x2e0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d125      	bne.n	8003f7e <UART_SetConfig+0x272>
 8003f32:	4b29      	ldr	r3, [pc, #164]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f40:	d017      	beq.n	8003f72 <UART_SetConfig+0x266>
 8003f42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f46:	d817      	bhi.n	8003f78 <UART_SetConfig+0x26c>
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4c:	d00b      	beq.n	8003f66 <UART_SetConfig+0x25a>
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f52:	d811      	bhi.n	8003f78 <UART_SetConfig+0x26c>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <UART_SetConfig+0x254>
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5c:	d006      	beq.n	8003f6c <UART_SetConfig+0x260>
 8003f5e:	e00b      	b.n	8003f78 <UART_SetConfig+0x26c>
 8003f60:	2301      	movs	r3, #1
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e076      	b.n	8004054 <UART_SetConfig+0x348>
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e073      	b.n	8004054 <UART_SetConfig+0x348>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e070      	b.n	8004054 <UART_SetConfig+0x348>
 8003f72:	2308      	movs	r3, #8
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e06d      	b.n	8004054 <UART_SetConfig+0x348>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e06a      	b.n	8004054 <UART_SetConfig+0x348>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <UART_SetConfig+0x2e4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d138      	bne.n	8003ffa <UART_SetConfig+0x2ee>
 8003f88:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <UART_SetConfig+0x2cc>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f96:	d017      	beq.n	8003fc8 <UART_SetConfig+0x2bc>
 8003f98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f9c:	d82a      	bhi.n	8003ff4 <UART_SetConfig+0x2e8>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa2:	d00b      	beq.n	8003fbc <UART_SetConfig+0x2b0>
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa8:	d824      	bhi.n	8003ff4 <UART_SetConfig+0x2e8>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <UART_SetConfig+0x2aa>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb2:	d006      	beq.n	8003fc2 <UART_SetConfig+0x2b6>
 8003fb4:	e01e      	b.n	8003ff4 <UART_SetConfig+0x2e8>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e04b      	b.n	8004054 <UART_SetConfig+0x348>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e048      	b.n	8004054 <UART_SetConfig+0x348>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e045      	b.n	8004054 <UART_SetConfig+0x348>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e042      	b.n	8004054 <UART_SetConfig+0x348>
 8003fce:	bf00      	nop
 8003fd0:	efff69f3 	.word	0xefff69f3
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40004800 	.word	0x40004800
 8003fe4:	40004c00 	.word	0x40004c00
 8003fe8:	40005000 	.word	0x40005000
 8003fec:	40011400 	.word	0x40011400
 8003ff0:	40007800 	.word	0x40007800
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e02c      	b.n	8004054 <UART_SetConfig+0x348>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a72      	ldr	r2, [pc, #456]	@ (80041c8 <UART_SetConfig+0x4bc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d125      	bne.n	8004050 <UART_SetConfig+0x344>
 8004004:	4b71      	ldr	r3, [pc, #452]	@ (80041cc <UART_SetConfig+0x4c0>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800400e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004012:	d017      	beq.n	8004044 <UART_SetConfig+0x338>
 8004014:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004018:	d817      	bhi.n	800404a <UART_SetConfig+0x33e>
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401e:	d00b      	beq.n	8004038 <UART_SetConfig+0x32c>
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004024:	d811      	bhi.n	800404a <UART_SetConfig+0x33e>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <UART_SetConfig+0x326>
 800402a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800402e:	d006      	beq.n	800403e <UART_SetConfig+0x332>
 8004030:	e00b      	b.n	800404a <UART_SetConfig+0x33e>
 8004032:	2300      	movs	r3, #0
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e00d      	b.n	8004054 <UART_SetConfig+0x348>
 8004038:	2302      	movs	r3, #2
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e00a      	b.n	8004054 <UART_SetConfig+0x348>
 800403e:	2304      	movs	r3, #4
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e007      	b.n	8004054 <UART_SetConfig+0x348>
 8004044:	2308      	movs	r3, #8
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e004      	b.n	8004054 <UART_SetConfig+0x348>
 800404a:	2310      	movs	r3, #16
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e001      	b.n	8004054 <UART_SetConfig+0x348>
 8004050:	2310      	movs	r3, #16
 8004052:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800405c:	d15b      	bne.n	8004116 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d828      	bhi.n	80040b6 <UART_SetConfig+0x3aa>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <UART_SetConfig+0x360>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe f92c 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8004094:	61b8      	str	r0, [r7, #24]
        break;
 8004096:	e013      	b.n	80040c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7fe f93c 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b4b      	ldr	r3, [pc, #300]	@ (80041d0 <UART_SetConfig+0x4c4>)
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e00c      	b.n	80040c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7fe f84f 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80040aa:	61b8      	str	r0, [r7, #24]
        break;
 80040ac:	e008      	b.n	80040c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e004      	b.n	80040c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	77bb      	strb	r3, [r7, #30]
        break;
 80040be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d074      	beq.n	80041b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	005a      	lsls	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b0f      	cmp	r3, #15
 80040e0:	d916      	bls.n	8004110 <UART_SetConfig+0x404>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e8:	d212      	bcs.n	8004110 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f023 030f 	bic.w	r3, r3, #15
 80040f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	b29a      	uxth	r2, r3
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	4313      	orrs	r3, r2
 8004104:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	89fa      	ldrh	r2, [r7, #14]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	e04f      	b.n	80041b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	77bb      	strb	r3, [r7, #30]
 8004114:	e04c      	b.n	80041b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004116:	7ffb      	ldrb	r3, [r7, #31]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d828      	bhi.n	800416e <UART_SetConfig+0x462>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <UART_SetConfig+0x418>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	0800416f 	.word	0x0800416f
 8004134:	0800415f 	.word	0x0800415f
 8004138:	0800416f 	.word	0x0800416f
 800413c:	0800416f 	.word	0x0800416f
 8004140:	0800416f 	.word	0x0800416f
 8004144:	08004167 	.word	0x08004167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004148:	f7fe f8d0 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 800414c:	61b8      	str	r0, [r7, #24]
        break;
 800414e:	e013      	b.n	8004178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7fe f8e0 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8004154:	61b8      	str	r0, [r7, #24]
        break;
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004158:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <UART_SetConfig+0x4c4>)
 800415a:	61bb      	str	r3, [r7, #24]
        break;
 800415c:	e00c      	b.n	8004178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415e:	f7fd fff3 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8004162:	61b8      	str	r0, [r7, #24]
        break;
 8004164:	e008      	b.n	8004178 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800416a:	61bb      	str	r3, [r7, #24]
        break;
 800416c:	e004      	b.n	8004178 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	77bb      	strb	r3, [r7, #30]
        break;
 8004176:	bf00      	nop
    }

    if (pclk != 0U)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	085a      	lsrs	r2, r3, #1
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	441a      	add	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d909      	bls.n	80041ac <UART_SetConfig+0x4a0>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419e:	d205      	bcs.n	80041ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	e001      	b.n	80041b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40007c00 	.word	0x40007c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01a      	beq.n	80042ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d2:	d10a      	bne.n	80042ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	@ 0x30
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004328:	f7fc ff76 	bl	8001218 <HAL_GetTick>
 800432c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d12e      	bne.n	800439a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f83b 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d021      	beq.n	800439a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	60fb      	str	r3, [r7, #12]
   return(result);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e6      	bne.n	8004356 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e011      	b.n	80043be <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3728      	adds	r7, #40	@ 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	e04f      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d04b      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fc ff1a 	bl	8001218 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04e      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d037      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d034      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb2>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b40      	cmp	r3, #64	@ 0x40
 8004412:	d031      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d110      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2208      	movs	r2, #8
 8004428:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f8fe 	bl	800462c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2208      	movs	r2, #8
 8004434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e029      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004452:	d111      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800445c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f8e4 	bl	800462c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e00f      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	429a      	cmp	r2, r3
 8004494:	d0a0      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b097      	sub	sp, #92	@ 0x5c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	d10e      	bne.n	80044f2 <UART_Start_Receive_IT+0x52>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <UART_Start_Receive_IT+0x48>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044e6:	e02d      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	22ff      	movs	r2, #255	@ 0xff
 80044ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044f0:	e028      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10d      	bne.n	8004516 <UART_Start_Receive_IT+0x76>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <UART_Start_Receive_IT+0x6c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	@ 0xff
 8004506:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800450a:	e01b      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	227f      	movs	r2, #127	@ 0x7f
 8004510:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004514:	e016      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800451e:	d10d      	bne.n	800453c <UART_Start_Receive_IT+0x9c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <UART_Start_Receive_IT+0x92>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	227f      	movs	r2, #127	@ 0x7f
 800452c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004530:	e008      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	223f      	movs	r2, #63	@ 0x3f
 8004536:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800453a:	e003      	b.n	8004544 <UART_Start_Receive_IT+0xa4>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2222      	movs	r2, #34	@ 0x22
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	657b      	str	r3, [r7, #84]	@ 0x54
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004574:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004576:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800457a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004590:	d107      	bne.n	80045a2 <UART_Start_Receive_IT+0x102>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a21      	ldr	r2, [pc, #132]	@ (8004624 <UART_Start_Receive_IT+0x184>)
 800459e:	669a      	str	r2, [r3, #104]	@ 0x68
 80045a0:	e002      	b.n	80045a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a20      	ldr	r2, [pc, #128]	@ (8004628 <UART_Start_Receive_IT+0x188>)
 80045a6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d019      	beq.n	80045e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80045c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_Start_Receive_IT+0x110>
 80045e2:	e018      	b.n	8004616 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f043 0320 	orr.w	r3, r3, #32
 80045f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	375c      	adds	r7, #92	@ 0x5c
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	0800491d 	.word	0x0800491d
 8004628:	08004775 	.word	0x08004775

0800462c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b095      	sub	sp, #84	@ 0x54
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004652:	643b      	str	r3, [r7, #64]	@ 0x40
 8004654:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e6      	bne.n	8004634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	61fb      	str	r3, [r7, #28]
   return(result);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3308      	adds	r3, #8
 8004684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800468c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d118      	bne.n	80046d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 0310 	bic.w	r3, r3, #16
 80046b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6979      	ldr	r1, [r7, #20]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	613b      	str	r3, [r7, #16]
   return(result);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046e8:	bf00      	nop
 80046ea:	3754      	adds	r7, #84	@ 0x54
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fae4 	bl	8003ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60bb      	str	r3, [r7, #8]
   return(result);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	613b      	str	r3, [r7, #16]
   return(result);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fab0 	bl	8003ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800476c:	bf00      	nop
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b09c      	sub	sp, #112	@ 0x70
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004782:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478c:	2b22      	cmp	r3, #34	@ 0x22
 800478e:	f040 80b9 	bne.w	8004904 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800479c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047a0:	b2d9      	uxtb	r1, r3
 80047a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ac:	400a      	ands	r2, r1
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 809c 	bne.w	8004914 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004800:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	667b      	str	r3, [r7, #100]	@ 0x64
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800482e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004830:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800483c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d018      	beq.n	8004896 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	623b      	str	r3, [r7, #32]
   return(result);
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004878:	663b      	str	r3, [r7, #96]	@ 0x60
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
 8004884:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e6      	bne.n	8004864 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12e      	bne.n	80048fc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69b9      	ldr	r1, [r7, #24]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	617b      	str	r3, [r7, #20]
   return(result);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d103      	bne.n	80048ec <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2210      	movs	r2, #16
 80048ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff f9fd 	bl	8003cf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048fa:	e00b      	b.n	8004914 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fc f851 	bl	80009a4 <HAL_UART_RxCpltCallback>
}
 8004902:	e007      	b.n	8004914 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	619a      	str	r2, [r3, #24]
}
 8004914:	bf00      	nop
 8004916:	3770      	adds	r7, #112	@ 0x70
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b09c      	sub	sp, #112	@ 0x70
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800492a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004934:	2b22      	cmp	r3, #34	@ 0x22
 8004936:	f040 80b9 	bne.w	8004aac <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800494a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800494e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004952:	4013      	ands	r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004958:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 809c 	bne.w	8004abc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004998:	667b      	str	r3, [r7, #100]	@ 0x64
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80049b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e6      	bne.n	8004984 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e5      	bne.n	80049b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d018      	beq.n	8004a3e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a2c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d12e      	bne.n	8004aa4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0310 	bic.w	r3, r3, #16
 8004a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	613b      	str	r3, [r7, #16]
   return(result);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d103      	bne.n	8004a94 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2210      	movs	r2, #16
 8004a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff f929 	bl	8003cf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aa2:	e00b      	b.n	8004abc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fb ff7d 	bl	80009a4 <HAL_UART_RxCpltCallback>
}
 8004aaa:	e007      	b.n	8004abc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	619a      	str	r2, [r3, #24]
}
 8004abc:	bf00      	nop
 8004abe:	3770      	adds	r7, #112	@ 0x70
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <std>:
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	4604      	mov	r4, r0
 8004aca:	e9c0 3300 	strd	r3, r3, [r0]
 8004ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad2:	6083      	str	r3, [r0, #8]
 8004ad4:	8181      	strh	r1, [r0, #12]
 8004ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ad8:	81c2      	strh	r2, [r0, #14]
 8004ada:	6183      	str	r3, [r0, #24]
 8004adc:	4619      	mov	r1, r3
 8004ade:	2208      	movs	r2, #8
 8004ae0:	305c      	adds	r0, #92	@ 0x5c
 8004ae2:	f000 f9e7 	bl	8004eb4 <memset>
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <std+0x58>)
 8004ae8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <std+0x5c>)
 8004aec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <std+0x60>)
 8004af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <std+0x64>)
 8004af4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <std+0x68>)
 8004af8:	6224      	str	r4, [r4, #32]
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d006      	beq.n	8004b0c <std+0x48>
 8004afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b02:	4294      	cmp	r4, r2
 8004b04:	d002      	beq.n	8004b0c <std+0x48>
 8004b06:	33d0      	adds	r3, #208	@ 0xd0
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d105      	bne.n	8004b18 <std+0x54>
 8004b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f000 ba58 	b.w	8004fc8 <__retarget_lock_init_recursive>
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	bf00      	nop
 8004b1c:	08004d05 	.word	0x08004d05
 8004b20:	08004d27 	.word	0x08004d27
 8004b24:	08004d5f 	.word	0x08004d5f
 8004b28:	08004d83 	.word	0x08004d83
 8004b2c:	20000314 	.word	0x20000314

08004b30 <stdio_exit_handler>:
 8004b30:	4a02      	ldr	r2, [pc, #8]	@ (8004b3c <stdio_exit_handler+0xc>)
 8004b32:	4903      	ldr	r1, [pc, #12]	@ (8004b40 <stdio_exit_handler+0x10>)
 8004b34:	4803      	ldr	r0, [pc, #12]	@ (8004b44 <stdio_exit_handler+0x14>)
 8004b36:	f000 b869 	b.w	8004c0c <_fwalk_sglue>
 8004b3a:	bf00      	nop
 8004b3c:	2000001c 	.word	0x2000001c
 8004b40:	080052c9 	.word	0x080052c9
 8004b44:	2000002c 	.word	0x2000002c

08004b48 <cleanup_stdio>:
 8004b48:	6841      	ldr	r1, [r0, #4]
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <cleanup_stdio+0x34>)
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	4604      	mov	r4, r0
 8004b52:	d001      	beq.n	8004b58 <cleanup_stdio+0x10>
 8004b54:	f000 fbb8 	bl	80052c8 <_fflush_r>
 8004b58:	68a1      	ldr	r1, [r4, #8]
 8004b5a:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <cleanup_stdio+0x38>)
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	d002      	beq.n	8004b66 <cleanup_stdio+0x1e>
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fbb1 	bl	80052c8 <_fflush_r>
 8004b66:	68e1      	ldr	r1, [r4, #12]
 8004b68:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <cleanup_stdio+0x3c>)
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	d004      	beq.n	8004b78 <cleanup_stdio+0x30>
 8004b6e:	4620      	mov	r0, r4
 8004b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b74:	f000 bba8 	b.w	80052c8 <_fflush_r>
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000314 	.word	0x20000314
 8004b80:	2000037c 	.word	0x2000037c
 8004b84:	200003e4 	.word	0x200003e4

08004b88 <global_stdio_init.part.0>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <global_stdio_init.part.0+0x30>)
 8004b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8004bbc <global_stdio_init.part.0+0x34>)
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <global_stdio_init.part.0+0x38>)
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	4620      	mov	r0, r4
 8004b94:	2200      	movs	r2, #0
 8004b96:	2104      	movs	r1, #4
 8004b98:	f7ff ff94 	bl	8004ac4 <std>
 8004b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2109      	movs	r1, #9
 8004ba4:	f7ff ff8e 	bl	8004ac4 <std>
 8004ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bac:	2202      	movs	r2, #2
 8004bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb2:	2112      	movs	r1, #18
 8004bb4:	f7ff bf86 	b.w	8004ac4 <std>
 8004bb8:	2000044c 	.word	0x2000044c
 8004bbc:	20000314 	.word	0x20000314
 8004bc0:	08004b31 	.word	0x08004b31

08004bc4 <__sfp_lock_acquire>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	@ (8004bcc <__sfp_lock_acquire+0x8>)
 8004bc6:	f000 ba00 	b.w	8004fca <__retarget_lock_acquire_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20000455 	.word	0x20000455

08004bd0 <__sfp_lock_release>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	@ (8004bd8 <__sfp_lock_release+0x8>)
 8004bd2:	f000 b9fb 	b.w	8004fcc <__retarget_lock_release_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	20000455 	.word	0x20000455

08004bdc <__sinit>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4604      	mov	r4, r0
 8004be0:	f7ff fff0 	bl	8004bc4 <__sfp_lock_acquire>
 8004be4:	6a23      	ldr	r3, [r4, #32]
 8004be6:	b11b      	cbz	r3, 8004bf0 <__sinit+0x14>
 8004be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bec:	f7ff bff0 	b.w	8004bd0 <__sfp_lock_release>
 8004bf0:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <__sinit+0x28>)
 8004bf2:	6223      	str	r3, [r4, #32]
 8004bf4:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <__sinit+0x2c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f5      	bne.n	8004be8 <__sinit+0xc>
 8004bfc:	f7ff ffc4 	bl	8004b88 <global_stdio_init.part.0>
 8004c00:	e7f2      	b.n	8004be8 <__sinit+0xc>
 8004c02:	bf00      	nop
 8004c04:	08004b49 	.word	0x08004b49
 8004c08:	2000044c 	.word	0x2000044c

08004c0c <_fwalk_sglue>:
 8004c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	4607      	mov	r7, r0
 8004c12:	4688      	mov	r8, r1
 8004c14:	4614      	mov	r4, r2
 8004c16:	2600      	movs	r6, #0
 8004c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c20:	d505      	bpl.n	8004c2e <_fwalk_sglue+0x22>
 8004c22:	6824      	ldr	r4, [r4, #0]
 8004c24:	2c00      	cmp	r4, #0
 8004c26:	d1f7      	bne.n	8004c18 <_fwalk_sglue+0xc>
 8004c28:	4630      	mov	r0, r6
 8004c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d907      	bls.n	8004c44 <_fwalk_sglue+0x38>
 8004c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	d003      	beq.n	8004c44 <_fwalk_sglue+0x38>
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4638      	mov	r0, r7
 8004c40:	47c0      	blx	r8
 8004c42:	4306      	orrs	r6, r0
 8004c44:	3568      	adds	r5, #104	@ 0x68
 8004c46:	e7e9      	b.n	8004c1c <_fwalk_sglue+0x10>

08004c48 <_puts_r>:
 8004c48:	6a03      	ldr	r3, [r0, #32]
 8004c4a:	b570      	push	{r4, r5, r6, lr}
 8004c4c:	6884      	ldr	r4, [r0, #8]
 8004c4e:	4605      	mov	r5, r0
 8004c50:	460e      	mov	r6, r1
 8004c52:	b90b      	cbnz	r3, 8004c58 <_puts_r+0x10>
 8004c54:	f7ff ffc2 	bl	8004bdc <__sinit>
 8004c58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d405      	bmi.n	8004c6a <_puts_r+0x22>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	0598      	lsls	r0, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_puts_r+0x22>
 8004c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c66:	f000 f9b0 	bl	8004fca <__retarget_lock_acquire_recursive>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	0719      	lsls	r1, r3, #28
 8004c6e:	d502      	bpl.n	8004c76 <_puts_r+0x2e>
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d135      	bne.n	8004ce2 <_puts_r+0x9a>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 f8c5 	bl	8004e08 <__swsetup_r>
 8004c7e:	b380      	cbz	r0, 8004ce2 <_puts_r+0x9a>
 8004c80:	f04f 35ff 	mov.w	r5, #4294967295
 8004c84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c86:	07da      	lsls	r2, r3, #31
 8004c88:	d405      	bmi.n	8004c96 <_puts_r+0x4e>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	059b      	lsls	r3, r3, #22
 8004c8e:	d402      	bmi.n	8004c96 <_puts_r+0x4e>
 8004c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c92:	f000 f99b 	bl	8004fcc <__retarget_lock_release_recursive>
 8004c96:	4628      	mov	r0, r5
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da04      	bge.n	8004ca8 <_puts_r+0x60>
 8004c9e:	69a2      	ldr	r2, [r4, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	dc17      	bgt.n	8004cd4 <_puts_r+0x8c>
 8004ca4:	290a      	cmp	r1, #10
 8004ca6:	d015      	beq.n	8004cd4 <_puts_r+0x8c>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	6022      	str	r2, [r4, #0]
 8004cae:	7019      	strb	r1, [r3, #0]
 8004cb0:	68a3      	ldr	r3, [r4, #8]
 8004cb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	d1ed      	bne.n	8004c9a <_puts_r+0x52>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da11      	bge.n	8004ce6 <_puts_r+0x9e>
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	210a      	movs	r1, #10
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 f85f 	bl	8004d8a <__swbuf_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d0d7      	beq.n	8004c80 <_puts_r+0x38>
 8004cd0:	250a      	movs	r5, #10
 8004cd2:	e7d7      	b.n	8004c84 <_puts_r+0x3c>
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f857 	bl	8004d8a <__swbuf_r>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d1e7      	bne.n	8004cb0 <_puts_r+0x68>
 8004ce0:	e7ce      	b.n	8004c80 <_puts_r+0x38>
 8004ce2:	3e01      	subs	r6, #1
 8004ce4:	e7e4      	b.n	8004cb0 <_puts_r+0x68>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	6022      	str	r2, [r4, #0]
 8004cec:	220a      	movs	r2, #10
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e7ee      	b.n	8004cd0 <_puts_r+0x88>
	...

08004cf4 <puts>:
 8004cf4:	4b02      	ldr	r3, [pc, #8]	@ (8004d00 <puts+0xc>)
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	f7ff bfa5 	b.w	8004c48 <_puts_r>
 8004cfe:	bf00      	nop
 8004d00:	20000028 	.word	0x20000028

08004d04 <__sread>:
 8004d04:	b510      	push	{r4, lr}
 8004d06:	460c      	mov	r4, r1
 8004d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0c:	f000 f90e 	bl	8004f2c <_read_r>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	bfab      	itete	ge
 8004d14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d16:	89a3      	ldrhlt	r3, [r4, #12]
 8004d18:	181b      	addge	r3, r3, r0
 8004d1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d1e:	bfac      	ite	ge
 8004d20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d22:	81a3      	strhlt	r3, [r4, #12]
 8004d24:	bd10      	pop	{r4, pc}

08004d26 <__swrite>:
 8004d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2a:	461f      	mov	r7, r3
 8004d2c:	898b      	ldrh	r3, [r1, #12]
 8004d2e:	05db      	lsls	r3, r3, #23
 8004d30:	4605      	mov	r5, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	4616      	mov	r6, r2
 8004d36:	d505      	bpl.n	8004d44 <__swrite+0x1e>
 8004d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f000 f8e2 	bl	8004f08 <_lseek_r>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	4632      	mov	r2, r6
 8004d52:	463b      	mov	r3, r7
 8004d54:	4628      	mov	r0, r5
 8004d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5a:	f000 b8f9 	b.w	8004f50 <_write_r>

08004d5e <__sseek>:
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	460c      	mov	r4, r1
 8004d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d66:	f000 f8cf 	bl	8004f08 <_lseek_r>
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	bf15      	itete	ne
 8004d70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d7a:	81a3      	strheq	r3, [r4, #12]
 8004d7c:	bf18      	it	ne
 8004d7e:	81a3      	strhne	r3, [r4, #12]
 8004d80:	bd10      	pop	{r4, pc}

08004d82 <__sclose>:
 8004d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d86:	f000 b8af 	b.w	8004ee8 <_close_r>

08004d8a <__swbuf_r>:
 8004d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	4614      	mov	r4, r2
 8004d90:	4605      	mov	r5, r0
 8004d92:	b118      	cbz	r0, 8004d9c <__swbuf_r+0x12>
 8004d94:	6a03      	ldr	r3, [r0, #32]
 8004d96:	b90b      	cbnz	r3, 8004d9c <__swbuf_r+0x12>
 8004d98:	f7ff ff20 	bl	8004bdc <__sinit>
 8004d9c:	69a3      	ldr	r3, [r4, #24]
 8004d9e:	60a3      	str	r3, [r4, #8]
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	071a      	lsls	r2, r3, #28
 8004da4:	d501      	bpl.n	8004daa <__swbuf_r+0x20>
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	b943      	cbnz	r3, 8004dbc <__swbuf_r+0x32>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 f82b 	bl	8004e08 <__swsetup_r>
 8004db2:	b118      	cbz	r0, 8004dbc <__swbuf_r+0x32>
 8004db4:	f04f 37ff 	mov.w	r7, #4294967295
 8004db8:	4638      	mov	r0, r7
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	6922      	ldr	r2, [r4, #16]
 8004dc0:	1a98      	subs	r0, r3, r2
 8004dc2:	6963      	ldr	r3, [r4, #20]
 8004dc4:	b2f6      	uxtb	r6, r6
 8004dc6:	4283      	cmp	r3, r0
 8004dc8:	4637      	mov	r7, r6
 8004dca:	dc05      	bgt.n	8004dd8 <__swbuf_r+0x4e>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 fa7a 	bl	80052c8 <_fflush_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d1ed      	bne.n	8004db4 <__swbuf_r+0x2a>
 8004dd8:	68a3      	ldr	r3, [r4, #8]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	6022      	str	r2, [r4, #0]
 8004de4:	701e      	strb	r6, [r3, #0]
 8004de6:	6962      	ldr	r2, [r4, #20]
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d004      	beq.n	8004df8 <__swbuf_r+0x6e>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	07db      	lsls	r3, r3, #31
 8004df2:	d5e1      	bpl.n	8004db8 <__swbuf_r+0x2e>
 8004df4:	2e0a      	cmp	r6, #10
 8004df6:	d1df      	bne.n	8004db8 <__swbuf_r+0x2e>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 fa64 	bl	80052c8 <_fflush_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0d9      	beq.n	8004db8 <__swbuf_r+0x2e>
 8004e04:	e7d6      	b.n	8004db4 <__swbuf_r+0x2a>
	...

08004e08 <__swsetup_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4b29      	ldr	r3, [pc, #164]	@ (8004eb0 <__swsetup_r+0xa8>)
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	460c      	mov	r4, r1
 8004e12:	b118      	cbz	r0, 8004e1c <__swsetup_r+0x14>
 8004e14:	6a03      	ldr	r3, [r0, #32]
 8004e16:	b90b      	cbnz	r3, 8004e1c <__swsetup_r+0x14>
 8004e18:	f7ff fee0 	bl	8004bdc <__sinit>
 8004e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e20:	0719      	lsls	r1, r3, #28
 8004e22:	d422      	bmi.n	8004e6a <__swsetup_r+0x62>
 8004e24:	06da      	lsls	r2, r3, #27
 8004e26:	d407      	bmi.n	8004e38 <__swsetup_r+0x30>
 8004e28:	2209      	movs	r2, #9
 8004e2a:	602a      	str	r2, [r5, #0]
 8004e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295
 8004e36:	e033      	b.n	8004ea0 <__swsetup_r+0x98>
 8004e38:	0758      	lsls	r0, r3, #29
 8004e3a:	d512      	bpl.n	8004e62 <__swsetup_r+0x5a>
 8004e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e3e:	b141      	cbz	r1, 8004e52 <__swsetup_r+0x4a>
 8004e40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d002      	beq.n	8004e4e <__swsetup_r+0x46>
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f8c1 	bl	8004fd0 <_free_r>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6063      	str	r3, [r4, #4]
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	f043 0308 	orr.w	r3, r3, #8
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	b94b      	cbnz	r3, 8004e82 <__swsetup_r+0x7a>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e78:	d003      	beq.n	8004e82 <__swsetup_r+0x7a>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 fa71 	bl	8005364 <__smakebuf_r>
 8004e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e86:	f013 0201 	ands.w	r2, r3, #1
 8004e8a:	d00a      	beq.n	8004ea2 <__swsetup_r+0x9a>
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	60a2      	str	r2, [r4, #8]
 8004e90:	6962      	ldr	r2, [r4, #20]
 8004e92:	4252      	negs	r2, r2
 8004e94:	61a2      	str	r2, [r4, #24]
 8004e96:	6922      	ldr	r2, [r4, #16]
 8004e98:	b942      	cbnz	r2, 8004eac <__swsetup_r+0xa4>
 8004e9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e9e:	d1c5      	bne.n	8004e2c <__swsetup_r+0x24>
 8004ea0:	bd38      	pop	{r3, r4, r5, pc}
 8004ea2:	0799      	lsls	r1, r3, #30
 8004ea4:	bf58      	it	pl
 8004ea6:	6962      	ldrpl	r2, [r4, #20]
 8004ea8:	60a2      	str	r2, [r4, #8]
 8004eaa:	e7f4      	b.n	8004e96 <__swsetup_r+0x8e>
 8004eac:	2000      	movs	r0, #0
 8004eae:	e7f7      	b.n	8004ea0 <__swsetup_r+0x98>
 8004eb0:	20000028 	.word	0x20000028

08004eb4 <memset>:
 8004eb4:	4402      	add	r2, r0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d100      	bne.n	8004ebe <memset+0xa>
 8004ebc:	4770      	bx	lr
 8004ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8004ec2:	e7f9      	b.n	8004eb8 <memset+0x4>

08004ec4 <strncmp>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	b16a      	cbz	r2, 8004ee4 <strncmp+0x20>
 8004ec8:	3901      	subs	r1, #1
 8004eca:	1884      	adds	r4, r0, r2
 8004ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d103      	bne.n	8004ee0 <strncmp+0x1c>
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d001      	beq.n	8004ee0 <strncmp+0x1c>
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d1f5      	bne.n	8004ecc <strncmp+0x8>
 8004ee0:	1ad0      	subs	r0, r2, r3
 8004ee2:	bd10      	pop	{r4, pc}
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	e7fc      	b.n	8004ee2 <strncmp+0x1e>

08004ee8 <_close_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d06      	ldr	r5, [pc, #24]	@ (8004f04 <_close_r+0x1c>)
 8004eec:	2300      	movs	r3, #0
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	f7fb feb1 	bl	8000c5a <_close>
 8004ef8:	1c43      	adds	r3, r0, #1
 8004efa:	d102      	bne.n	8004f02 <_close_r+0x1a>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	b103      	cbz	r3, 8004f02 <_close_r+0x1a>
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	20000450 	.word	0x20000450

08004f08 <_lseek_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d07      	ldr	r5, [pc, #28]	@ (8004f28 <_lseek_r+0x20>)
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	4608      	mov	r0, r1
 8004f10:	4611      	mov	r1, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	602a      	str	r2, [r5, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fb fec6 	bl	8000ca8 <_lseek>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_lseek_r+0x1e>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_lseek_r+0x1e>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20000450 	.word	0x20000450

08004f2c <_read_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	@ (8004f4c <_read_r+0x20>)
 8004f30:	4604      	mov	r4, r0
 8004f32:	4608      	mov	r0, r1
 8004f34:	4611      	mov	r1, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7fb fe54 	bl	8000be8 <_read>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_read_r+0x1e>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_read_r+0x1e>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20000450 	.word	0x20000450

08004f50 <_write_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d07      	ldr	r5, [pc, #28]	@ (8004f70 <_write_r+0x20>)
 8004f54:	4604      	mov	r4, r0
 8004f56:	4608      	mov	r0, r1
 8004f58:	4611      	mov	r1, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fb fe5f 	bl	8000c22 <_write>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_write_r+0x1e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_write_r+0x1e>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	20000450 	.word	0x20000450

08004f74 <__errno>:
 8004f74:	4b01      	ldr	r3, [pc, #4]	@ (8004f7c <__errno+0x8>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000028 	.word	0x20000028

08004f80 <__libc_init_array>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4d0d      	ldr	r5, [pc, #52]	@ (8004fb8 <__libc_init_array+0x38>)
 8004f84:	4c0d      	ldr	r4, [pc, #52]	@ (8004fbc <__libc_init_array+0x3c>)
 8004f86:	1b64      	subs	r4, r4, r5
 8004f88:	10a4      	asrs	r4, r4, #2
 8004f8a:	2600      	movs	r6, #0
 8004f8c:	42a6      	cmp	r6, r4
 8004f8e:	d109      	bne.n	8004fa4 <__libc_init_array+0x24>
 8004f90:	4d0b      	ldr	r5, [pc, #44]	@ (8004fc0 <__libc_init_array+0x40>)
 8004f92:	4c0c      	ldr	r4, [pc, #48]	@ (8004fc4 <__libc_init_array+0x44>)
 8004f94:	f000 fa54 	bl	8005440 <_init>
 8004f98:	1b64      	subs	r4, r4, r5
 8004f9a:	10a4      	asrs	r4, r4, #2
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	42a6      	cmp	r6, r4
 8004fa0:	d105      	bne.n	8004fae <__libc_init_array+0x2e>
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa8:	4798      	blx	r3
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7ee      	b.n	8004f8c <__libc_init_array+0xc>
 8004fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb2:	4798      	blx	r3
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	e7f2      	b.n	8004f9e <__libc_init_array+0x1e>
 8004fb8:	080054d0 	.word	0x080054d0
 8004fbc:	080054d0 	.word	0x080054d0
 8004fc0:	080054d0 	.word	0x080054d0
 8004fc4:	080054d4 	.word	0x080054d4

08004fc8 <__retarget_lock_init_recursive>:
 8004fc8:	4770      	bx	lr

08004fca <__retarget_lock_acquire_recursive>:
 8004fca:	4770      	bx	lr

08004fcc <__retarget_lock_release_recursive>:
 8004fcc:	4770      	bx	lr
	...

08004fd0 <_free_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d041      	beq.n	800505c <_free_r+0x8c>
 8004fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fdc:	1f0c      	subs	r4, r1, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bfb8      	it	lt
 8004fe2:	18e4      	addlt	r4, r4, r3
 8004fe4:	f000 f8e0 	bl	80051a8 <__malloc_lock>
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8005060 <_free_r+0x90>)
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	b933      	cbnz	r3, 8004ffc <_free_r+0x2c>
 8004fee:	6063      	str	r3, [r4, #4]
 8004ff0:	6014      	str	r4, [r2, #0]
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ff8:	f000 b8dc 	b.w	80051b4 <__malloc_unlock>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d908      	bls.n	8005012 <_free_r+0x42>
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	1821      	adds	r1, r4, r0
 8005004:	428b      	cmp	r3, r1
 8005006:	bf01      	itttt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	1809      	addeq	r1, r1, r0
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	e7ed      	b.n	8004fee <_free_r+0x1e>
 8005012:	461a      	mov	r2, r3
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b10b      	cbz	r3, 800501c <_free_r+0x4c>
 8005018:	42a3      	cmp	r3, r4
 800501a:	d9fa      	bls.n	8005012 <_free_r+0x42>
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	1850      	adds	r0, r2, r1
 8005020:	42a0      	cmp	r0, r4
 8005022:	d10b      	bne.n	800503c <_free_r+0x6c>
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	4401      	add	r1, r0
 8005028:	1850      	adds	r0, r2, r1
 800502a:	4283      	cmp	r3, r0
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	d1e0      	bne.n	8004ff2 <_free_r+0x22>
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	6053      	str	r3, [r2, #4]
 8005036:	4408      	add	r0, r1
 8005038:	6010      	str	r0, [r2, #0]
 800503a:	e7da      	b.n	8004ff2 <_free_r+0x22>
 800503c:	d902      	bls.n	8005044 <_free_r+0x74>
 800503e:	230c      	movs	r3, #12
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	e7d6      	b.n	8004ff2 <_free_r+0x22>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	1821      	adds	r1, r4, r0
 8005048:	428b      	cmp	r3, r1
 800504a:	bf04      	itt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	6063      	str	r3, [r4, #4]
 8005052:	bf04      	itt	eq
 8005054:	1809      	addeq	r1, r1, r0
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	6054      	str	r4, [r2, #4]
 800505a:	e7ca      	b.n	8004ff2 <_free_r+0x22>
 800505c:	bd38      	pop	{r3, r4, r5, pc}
 800505e:	bf00      	nop
 8005060:	2000045c 	.word	0x2000045c

08005064 <sbrk_aligned>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0f      	ldr	r6, [pc, #60]	@ (80050a4 <sbrk_aligned+0x40>)
 8005068:	460c      	mov	r4, r1
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	4605      	mov	r5, r0
 800506e:	b911      	cbnz	r1, 8005076 <sbrk_aligned+0x12>
 8005070:	f000 f9d6 	bl	8005420 <_sbrk_r>
 8005074:	6030      	str	r0, [r6, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 f9d1 	bl	8005420 <_sbrk_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d103      	bne.n	800508a <sbrk_aligned+0x26>
 8005082:	f04f 34ff 	mov.w	r4, #4294967295
 8005086:	4620      	mov	r0, r4
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	1cc4      	adds	r4, r0, #3
 800508c:	f024 0403 	bic.w	r4, r4, #3
 8005090:	42a0      	cmp	r0, r4
 8005092:	d0f8      	beq.n	8005086 <sbrk_aligned+0x22>
 8005094:	1a21      	subs	r1, r4, r0
 8005096:	4628      	mov	r0, r5
 8005098:	f000 f9c2 	bl	8005420 <_sbrk_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d1f2      	bne.n	8005086 <sbrk_aligned+0x22>
 80050a0:	e7ef      	b.n	8005082 <sbrk_aligned+0x1e>
 80050a2:	bf00      	nop
 80050a4:	20000458 	.word	0x20000458

080050a8 <_malloc_r>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	1ccd      	adds	r5, r1, #3
 80050ae:	f025 0503 	bic.w	r5, r5, #3
 80050b2:	3508      	adds	r5, #8
 80050b4:	2d0c      	cmp	r5, #12
 80050b6:	bf38      	it	cc
 80050b8:	250c      	movcc	r5, #12
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	4606      	mov	r6, r0
 80050be:	db01      	blt.n	80050c4 <_malloc_r+0x1c>
 80050c0:	42a9      	cmp	r1, r5
 80050c2:	d904      	bls.n	80050ce <_malloc_r+0x26>
 80050c4:	230c      	movs	r3, #12
 80050c6:	6033      	str	r3, [r6, #0]
 80050c8:	2000      	movs	r0, #0
 80050ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051a4 <_malloc_r+0xfc>
 80050d2:	f000 f869 	bl	80051a8 <__malloc_lock>
 80050d6:	f8d8 3000 	ldr.w	r3, [r8]
 80050da:	461c      	mov	r4, r3
 80050dc:	bb44      	cbnz	r4, 8005130 <_malloc_r+0x88>
 80050de:	4629      	mov	r1, r5
 80050e0:	4630      	mov	r0, r6
 80050e2:	f7ff ffbf 	bl	8005064 <sbrk_aligned>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	4604      	mov	r4, r0
 80050ea:	d158      	bne.n	800519e <_malloc_r+0xf6>
 80050ec:	f8d8 4000 	ldr.w	r4, [r8]
 80050f0:	4627      	mov	r7, r4
 80050f2:	2f00      	cmp	r7, #0
 80050f4:	d143      	bne.n	800517e <_malloc_r+0xd6>
 80050f6:	2c00      	cmp	r4, #0
 80050f8:	d04b      	beq.n	8005192 <_malloc_r+0xea>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	4639      	mov	r1, r7
 80050fe:	4630      	mov	r0, r6
 8005100:	eb04 0903 	add.w	r9, r4, r3
 8005104:	f000 f98c 	bl	8005420 <_sbrk_r>
 8005108:	4581      	cmp	r9, r0
 800510a:	d142      	bne.n	8005192 <_malloc_r+0xea>
 800510c:	6821      	ldr	r1, [r4, #0]
 800510e:	1a6d      	subs	r5, r5, r1
 8005110:	4629      	mov	r1, r5
 8005112:	4630      	mov	r0, r6
 8005114:	f7ff ffa6 	bl	8005064 <sbrk_aligned>
 8005118:	3001      	adds	r0, #1
 800511a:	d03a      	beq.n	8005192 <_malloc_r+0xea>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	442b      	add	r3, r5
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	f8d8 3000 	ldr.w	r3, [r8]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	bb62      	cbnz	r2, 8005184 <_malloc_r+0xdc>
 800512a:	f8c8 7000 	str.w	r7, [r8]
 800512e:	e00f      	b.n	8005150 <_malloc_r+0xa8>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	1b52      	subs	r2, r2, r5
 8005134:	d420      	bmi.n	8005178 <_malloc_r+0xd0>
 8005136:	2a0b      	cmp	r2, #11
 8005138:	d917      	bls.n	800516a <_malloc_r+0xc2>
 800513a:	1961      	adds	r1, r4, r5
 800513c:	42a3      	cmp	r3, r4
 800513e:	6025      	str	r5, [r4, #0]
 8005140:	bf18      	it	ne
 8005142:	6059      	strne	r1, [r3, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	bf08      	it	eq
 8005148:	f8c8 1000 	streq.w	r1, [r8]
 800514c:	5162      	str	r2, [r4, r5]
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	4630      	mov	r0, r6
 8005152:	f000 f82f 	bl	80051b4 <__malloc_unlock>
 8005156:	f104 000b 	add.w	r0, r4, #11
 800515a:	1d23      	adds	r3, r4, #4
 800515c:	f020 0007 	bic.w	r0, r0, #7
 8005160:	1ac2      	subs	r2, r0, r3
 8005162:	bf1c      	itt	ne
 8005164:	1a1b      	subne	r3, r3, r0
 8005166:	50a3      	strne	r3, [r4, r2]
 8005168:	e7af      	b.n	80050ca <_malloc_r+0x22>
 800516a:	6862      	ldr	r2, [r4, #4]
 800516c:	42a3      	cmp	r3, r4
 800516e:	bf0c      	ite	eq
 8005170:	f8c8 2000 	streq.w	r2, [r8]
 8005174:	605a      	strne	r2, [r3, #4]
 8005176:	e7eb      	b.n	8005150 <_malloc_r+0xa8>
 8005178:	4623      	mov	r3, r4
 800517a:	6864      	ldr	r4, [r4, #4]
 800517c:	e7ae      	b.n	80050dc <_malloc_r+0x34>
 800517e:	463c      	mov	r4, r7
 8005180:	687f      	ldr	r7, [r7, #4]
 8005182:	e7b6      	b.n	80050f2 <_malloc_r+0x4a>
 8005184:	461a      	mov	r2, r3
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	42a3      	cmp	r3, r4
 800518a:	d1fb      	bne.n	8005184 <_malloc_r+0xdc>
 800518c:	2300      	movs	r3, #0
 800518e:	6053      	str	r3, [r2, #4]
 8005190:	e7de      	b.n	8005150 <_malloc_r+0xa8>
 8005192:	230c      	movs	r3, #12
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	4630      	mov	r0, r6
 8005198:	f000 f80c 	bl	80051b4 <__malloc_unlock>
 800519c:	e794      	b.n	80050c8 <_malloc_r+0x20>
 800519e:	6005      	str	r5, [r0, #0]
 80051a0:	e7d6      	b.n	8005150 <_malloc_r+0xa8>
 80051a2:	bf00      	nop
 80051a4:	2000045c 	.word	0x2000045c

080051a8 <__malloc_lock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	@ (80051b0 <__malloc_lock+0x8>)
 80051aa:	f7ff bf0e 	b.w	8004fca <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000454 	.word	0x20000454

080051b4 <__malloc_unlock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	@ (80051bc <__malloc_unlock+0x8>)
 80051b6:	f7ff bf09 	b.w	8004fcc <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	20000454 	.word	0x20000454

080051c0 <__sflush_r>:
 80051c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	0716      	lsls	r6, r2, #28
 80051ca:	4605      	mov	r5, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	d454      	bmi.n	800527a <__sflush_r+0xba>
 80051d0:	684b      	ldr	r3, [r1, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dc02      	bgt.n	80051dc <__sflush_r+0x1c>
 80051d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dd48      	ble.n	800526e <__sflush_r+0xae>
 80051dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d045      	beq.n	800526e <__sflush_r+0xae>
 80051e2:	2300      	movs	r3, #0
 80051e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051e8:	682f      	ldr	r7, [r5, #0]
 80051ea:	6a21      	ldr	r1, [r4, #32]
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	d030      	beq.n	8005252 <__sflush_r+0x92>
 80051f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	0759      	lsls	r1, r3, #29
 80051f6:	d505      	bpl.n	8005204 <__sflush_r+0x44>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	1ad2      	subs	r2, r2, r3
 80051fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051fe:	b10b      	cbz	r3, 8005204 <__sflush_r+0x44>
 8005200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	2300      	movs	r3, #0
 8005206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005208:	6a21      	ldr	r1, [r4, #32]
 800520a:	4628      	mov	r0, r5
 800520c:	47b0      	blx	r6
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	d106      	bne.n	8005222 <__sflush_r+0x62>
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	291d      	cmp	r1, #29
 8005218:	d82b      	bhi.n	8005272 <__sflush_r+0xb2>
 800521a:	4a2a      	ldr	r2, [pc, #168]	@ (80052c4 <__sflush_r+0x104>)
 800521c:	40ca      	lsrs	r2, r1
 800521e:	07d6      	lsls	r6, r2, #31
 8005220:	d527      	bpl.n	8005272 <__sflush_r+0xb2>
 8005222:	2200      	movs	r2, #0
 8005224:	6062      	str	r2, [r4, #4]
 8005226:	04d9      	lsls	r1, r3, #19
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	d504      	bpl.n	8005238 <__sflush_r+0x78>
 800522e:	1c42      	adds	r2, r0, #1
 8005230:	d101      	bne.n	8005236 <__sflush_r+0x76>
 8005232:	682b      	ldr	r3, [r5, #0]
 8005234:	b903      	cbnz	r3, 8005238 <__sflush_r+0x78>
 8005236:	6560      	str	r0, [r4, #84]	@ 0x54
 8005238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800523a:	602f      	str	r7, [r5, #0]
 800523c:	b1b9      	cbz	r1, 800526e <__sflush_r+0xae>
 800523e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005242:	4299      	cmp	r1, r3
 8005244:	d002      	beq.n	800524c <__sflush_r+0x8c>
 8005246:	4628      	mov	r0, r5
 8005248:	f7ff fec2 	bl	8004fd0 <_free_r>
 800524c:	2300      	movs	r3, #0
 800524e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005250:	e00d      	b.n	800526e <__sflush_r+0xae>
 8005252:	2301      	movs	r3, #1
 8005254:	4628      	mov	r0, r5
 8005256:	47b0      	blx	r6
 8005258:	4602      	mov	r2, r0
 800525a:	1c50      	adds	r0, r2, #1
 800525c:	d1c9      	bne.n	80051f2 <__sflush_r+0x32>
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0c6      	beq.n	80051f2 <__sflush_r+0x32>
 8005264:	2b1d      	cmp	r3, #29
 8005266:	d001      	beq.n	800526c <__sflush_r+0xac>
 8005268:	2b16      	cmp	r3, #22
 800526a:	d11e      	bne.n	80052aa <__sflush_r+0xea>
 800526c:	602f      	str	r7, [r5, #0]
 800526e:	2000      	movs	r0, #0
 8005270:	e022      	b.n	80052b8 <__sflush_r+0xf8>
 8005272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005276:	b21b      	sxth	r3, r3
 8005278:	e01b      	b.n	80052b2 <__sflush_r+0xf2>
 800527a:	690f      	ldr	r7, [r1, #16]
 800527c:	2f00      	cmp	r7, #0
 800527e:	d0f6      	beq.n	800526e <__sflush_r+0xae>
 8005280:	0793      	lsls	r3, r2, #30
 8005282:	680e      	ldr	r6, [r1, #0]
 8005284:	bf08      	it	eq
 8005286:	694b      	ldreq	r3, [r1, #20]
 8005288:	600f      	str	r7, [r1, #0]
 800528a:	bf18      	it	ne
 800528c:	2300      	movne	r3, #0
 800528e:	eba6 0807 	sub.w	r8, r6, r7
 8005292:	608b      	str	r3, [r1, #8]
 8005294:	f1b8 0f00 	cmp.w	r8, #0
 8005298:	dde9      	ble.n	800526e <__sflush_r+0xae>
 800529a:	6a21      	ldr	r1, [r4, #32]
 800529c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800529e:	4643      	mov	r3, r8
 80052a0:	463a      	mov	r2, r7
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b0      	blx	r6
 80052a6:	2800      	cmp	r0, #0
 80052a8:	dc08      	bgt.n	80052bc <__sflush_r+0xfc>
 80052aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052bc:	4407      	add	r7, r0
 80052be:	eba8 0800 	sub.w	r8, r8, r0
 80052c2:	e7e7      	b.n	8005294 <__sflush_r+0xd4>
 80052c4:	20400001 	.word	0x20400001

080052c8 <_fflush_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	4605      	mov	r5, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	b913      	cbnz	r3, 80052d8 <_fflush_r+0x10>
 80052d2:	2500      	movs	r5, #0
 80052d4:	4628      	mov	r0, r5
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	b118      	cbz	r0, 80052e2 <_fflush_r+0x1a>
 80052da:	6a03      	ldr	r3, [r0, #32]
 80052dc:	b90b      	cbnz	r3, 80052e2 <_fflush_r+0x1a>
 80052de:	f7ff fc7d 	bl	8004bdc <__sinit>
 80052e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f3      	beq.n	80052d2 <_fflush_r+0xa>
 80052ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052ec:	07d0      	lsls	r0, r2, #31
 80052ee:	d404      	bmi.n	80052fa <_fflush_r+0x32>
 80052f0:	0599      	lsls	r1, r3, #22
 80052f2:	d402      	bmi.n	80052fa <_fflush_r+0x32>
 80052f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052f6:	f7ff fe68 	bl	8004fca <__retarget_lock_acquire_recursive>
 80052fa:	4628      	mov	r0, r5
 80052fc:	4621      	mov	r1, r4
 80052fe:	f7ff ff5f 	bl	80051c0 <__sflush_r>
 8005302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005304:	07da      	lsls	r2, r3, #31
 8005306:	4605      	mov	r5, r0
 8005308:	d4e4      	bmi.n	80052d4 <_fflush_r+0xc>
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	059b      	lsls	r3, r3, #22
 800530e:	d4e1      	bmi.n	80052d4 <_fflush_r+0xc>
 8005310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005312:	f7ff fe5b 	bl	8004fcc <__retarget_lock_release_recursive>
 8005316:	e7dd      	b.n	80052d4 <_fflush_r+0xc>

08005318 <__swhatbuf_r>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	2900      	cmp	r1, #0
 8005322:	b096      	sub	sp, #88	@ 0x58
 8005324:	4615      	mov	r5, r2
 8005326:	461e      	mov	r6, r3
 8005328:	da0d      	bge.n	8005346 <__swhatbuf_r+0x2e>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	bf14      	ite	ne
 8005336:	2340      	movne	r3, #64	@ 0x40
 8005338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800533c:	2000      	movs	r0, #0
 800533e:	6031      	str	r1, [r6, #0]
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	b016      	add	sp, #88	@ 0x58
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	466a      	mov	r2, sp
 8005348:	f000 f848 	bl	80053dc <_fstat_r>
 800534c:	2800      	cmp	r0, #0
 800534e:	dbec      	blt.n	800532a <__swhatbuf_r+0x12>
 8005350:	9901      	ldr	r1, [sp, #4]
 8005352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800535a:	4259      	negs	r1, r3
 800535c:	4159      	adcs	r1, r3
 800535e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005362:	e7eb      	b.n	800533c <__swhatbuf_r+0x24>

08005364 <__smakebuf_r>:
 8005364:	898b      	ldrh	r3, [r1, #12]
 8005366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005368:	079d      	lsls	r5, r3, #30
 800536a:	4606      	mov	r6, r0
 800536c:	460c      	mov	r4, r1
 800536e:	d507      	bpl.n	8005380 <__smakebuf_r+0x1c>
 8005370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	2301      	movs	r3, #1
 800537a:	6163      	str	r3, [r4, #20]
 800537c:	b003      	add	sp, #12
 800537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005380:	ab01      	add	r3, sp, #4
 8005382:	466a      	mov	r2, sp
 8005384:	f7ff ffc8 	bl	8005318 <__swhatbuf_r>
 8005388:	9f00      	ldr	r7, [sp, #0]
 800538a:	4605      	mov	r5, r0
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	f7ff fe8a 	bl	80050a8 <_malloc_r>
 8005394:	b948      	cbnz	r0, 80053aa <__smakebuf_r+0x46>
 8005396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539a:	059a      	lsls	r2, r3, #22
 800539c:	d4ee      	bmi.n	800537c <__smakebuf_r+0x18>
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	e7e2      	b.n	8005370 <__smakebuf_r+0xc>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	6020      	str	r0, [r4, #0]
 80053ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053ba:	b15b      	cbz	r3, 80053d4 <__smakebuf_r+0x70>
 80053bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 f81d 	bl	8005400 <_isatty_r>
 80053c6:	b128      	cbz	r0, 80053d4 <__smakebuf_r+0x70>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	431d      	orrs	r5, r3
 80053d8:	81a5      	strh	r5, [r4, #12]
 80053da:	e7cf      	b.n	800537c <__smakebuf_r+0x18>

080053dc <_fstat_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d07      	ldr	r5, [pc, #28]	@ (80053fc <_fstat_r+0x20>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	f7fb fc42 	bl	8000c72 <_fstat>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d102      	bne.n	80053f8 <_fstat_r+0x1c>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	b103      	cbz	r3, 80053f8 <_fstat_r+0x1c>
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	bf00      	nop
 80053fc:	20000450 	.word	0x20000450

08005400 <_isatty_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	@ (800541c <_isatty_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb fc41 	bl	8000c92 <_isatty>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_isatty_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_isatty_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	20000450 	.word	0x20000450

08005420 <_sbrk_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d06      	ldr	r5, [pc, #24]	@ (800543c <_sbrk_r+0x1c>)
 8005424:	2300      	movs	r3, #0
 8005426:	4604      	mov	r4, r0
 8005428:	4608      	mov	r0, r1
 800542a:	602b      	str	r3, [r5, #0]
 800542c:	f7fb fc4a 	bl	8000cc4 <_sbrk>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d102      	bne.n	800543a <_sbrk_r+0x1a>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	b103      	cbz	r3, 800543a <_sbrk_r+0x1a>
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	20000450 	.word	0x20000450

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
