
PartieNoah.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003870  08003870  00004870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800390c  0800390c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003914  08003914  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003914  08003914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003918  08003918  00004918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800391c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08003928  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003928  00005198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e329  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e67  00000000  00000000  00013365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000151d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c3  00000000  00000000  00015e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026756  00000000  00000000  0001680b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b4  00000000  00000000  0003cf61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1fbd  00000000  00000000  0004d115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  0013f118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003858 	.word	0x08003858

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003858 	.word	0x08003858

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b988 	b.w	8000554 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9d08      	ldr	r5, [sp, #32]
 8000262:	468e      	mov	lr, r1
 8000264:	4604      	mov	r4, r0
 8000266:	4688      	mov	r8, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14a      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d962      	bls.n	8000338 <__udivmoddi4+0xdc>
 8000272:	fab2 f682 	clz	r6, r2
 8000276:	b14e      	cbz	r6, 800028c <__udivmoddi4+0x30>
 8000278:	f1c6 0320 	rsb	r3, r6, #32
 800027c:	fa01 f806 	lsl.w	r8, r1, r6
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	40b7      	lsls	r7, r6
 8000286:	ea43 0808 	orr.w	r8, r3, r8
 800028a:	40b4      	lsls	r4, r6
 800028c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000290:	fa1f fc87 	uxth.w	ip, r7
 8000294:	fbb8 f1fe 	udiv	r1, r8, lr
 8000298:	0c23      	lsrs	r3, r4, #16
 800029a:	fb0e 8811 	mls	r8, lr, r1, r8
 800029e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a2:	fb01 f20c 	mul.w	r2, r1, ip
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x62>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b0:	f080 80ea 	bcs.w	8000488 <__udivmoddi4+0x22c>
 80002b4:	429a      	cmp	r2, r3
 80002b6:	f240 80e7 	bls.w	8000488 <__udivmoddi4+0x22c>
 80002ba:	3902      	subs	r1, #2
 80002bc:	443b      	add	r3, r7
 80002be:	1a9a      	subs	r2, r3, r2
 80002c0:	b2a3      	uxth	r3, r4
 80002c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	459c      	cmp	ip, r3
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x8e>
 80002d6:	18fb      	adds	r3, r7, r3
 80002d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002dc:	f080 80d6 	bcs.w	800048c <__udivmoddi4+0x230>
 80002e0:	459c      	cmp	ip, r3
 80002e2:	f240 80d3 	bls.w	800048c <__udivmoddi4+0x230>
 80002e6:	443b      	add	r3, r7
 80002e8:	3802      	subs	r0, #2
 80002ea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ee:	eba3 030c 	sub.w	r3, r3, ip
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa2>
 80002f6:	40f3      	lsrs	r3, r6
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xb6>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb0>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa2>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x14c>
 800031a:	4573      	cmp	r3, lr
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xc8>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 8105 	bhi.w	800052e <__udivmoddi4+0x2d2>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb6e 0203 	sbc.w	r2, lr, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4690      	mov	r8, r2
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0xa2>
 8000332:	e9c5 4800 	strd	r4, r8, [r5]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0xa2>
 8000338:	2a00      	cmp	r2, #0
 800033a:	f000 8090 	beq.w	800045e <__udivmoddi4+0x202>
 800033e:	fab2 f682 	clz	r6, r2
 8000342:	2e00      	cmp	r6, #0
 8000344:	f040 80a4 	bne.w	8000490 <__udivmoddi4+0x234>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	0c03      	lsrs	r3, r0, #16
 800034c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000350:	b280      	uxth	r0, r0
 8000352:	b2bc      	uxth	r4, r7
 8000354:	2101      	movs	r1, #1
 8000356:	fbb2 fcfe 	udiv	ip, r2, lr
 800035a:	fb0e 221c 	mls	r2, lr, ip, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb04 f20c 	mul.w	r2, r4, ip
 8000366:	429a      	cmp	r2, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x11e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x11c>
 8000372:	429a      	cmp	r2, r3
 8000374:	f200 80e0 	bhi.w	8000538 <__udivmoddi4+0x2dc>
 8000378:	46c4      	mov	ip, r8
 800037a:	1a9b      	subs	r3, r3, r2
 800037c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000380:	fb0e 3312 	mls	r3, lr, r2, r3
 8000384:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000388:	fb02 f404 	mul.w	r4, r2, r4
 800038c:	429c      	cmp	r4, r3
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x144>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f102 30ff 	add.w	r0, r2, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x142>
 8000398:	429c      	cmp	r4, r3
 800039a:	f200 80ca 	bhi.w	8000532 <__udivmoddi4+0x2d6>
 800039e:	4602      	mov	r2, r0
 80003a0:	1b1b      	subs	r3, r3, r4
 80003a2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x98>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa0e f401 	lsl.w	r4, lr, r1
 80003b8:	fa20 f306 	lsr.w	r3, r0, r6
 80003bc:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ca:	fa1f fc87 	uxth.w	ip, r7
 80003ce:	fbbe f0f9 	udiv	r0, lr, r9
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003dc:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1a0>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ee:	f080 809c 	bcs.w	800052a <__udivmoddi4+0x2ce>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f240 8099 	bls.w	800052a <__udivmoddi4+0x2ce>
 80003f8:	3802      	subs	r0, #2
 80003fa:	443c      	add	r4, r7
 80003fc:	eba4 040e 	sub.w	r4, r4, lr
 8000400:	fa1f fe83 	uxth.w	lr, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000410:	fb03 fc0c 	mul.w	ip, r3, ip
 8000414:	45a4      	cmp	ip, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1ce>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f103 3eff 	add.w	lr, r3, #4294967295
 800041e:	f080 8082 	bcs.w	8000526 <__udivmoddi4+0x2ca>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d97f      	bls.n	8000526 <__udivmoddi4+0x2ca>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042e:	eba4 040c 	sub.w	r4, r4, ip
 8000432:	fba0 ec02 	umull	lr, ip, r0, r2
 8000436:	4564      	cmp	r4, ip
 8000438:	4673      	mov	r3, lr
 800043a:	46e1      	mov	r9, ip
 800043c:	d362      	bcc.n	8000504 <__udivmoddi4+0x2a8>
 800043e:	d05f      	beq.n	8000500 <__udivmoddi4+0x2a4>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x1fe>
 8000442:	ebb8 0203 	subs.w	r2, r8, r3
 8000446:	eb64 0409 	sbc.w	r4, r4, r9
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	fa22 f301 	lsr.w	r3, r2, r1
 8000452:	431e      	orrs	r6, r3
 8000454:	40cc      	lsrs	r4, r1
 8000456:	e9c5 6400 	strd	r6, r4, [r5]
 800045a:	2100      	movs	r1, #0
 800045c:	e74f      	b.n	80002fe <__udivmoddi4+0xa2>
 800045e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000462:	0c01      	lsrs	r1, r0, #16
 8000464:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000468:	b280      	uxth	r0, r0
 800046a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800046e:	463b      	mov	r3, r7
 8000470:	4638      	mov	r0, r7
 8000472:	463c      	mov	r4, r7
 8000474:	46b8      	mov	r8, r7
 8000476:	46be      	mov	lr, r7
 8000478:	2620      	movs	r6, #32
 800047a:	fbb1 f1f7 	udiv	r1, r1, r7
 800047e:	eba2 0208 	sub.w	r2, r2, r8
 8000482:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000486:	e766      	b.n	8000356 <__udivmoddi4+0xfa>
 8000488:	4601      	mov	r1, r0
 800048a:	e718      	b.n	80002be <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e72c      	b.n	80002ea <__udivmoddi4+0x8e>
 8000490:	f1c6 0220 	rsb	r2, r6, #32
 8000494:	fa2e f302 	lsr.w	r3, lr, r2
 8000498:	40b7      	lsls	r7, r6
 800049a:	40b1      	lsls	r1, r6
 800049c:	fa20 f202 	lsr.w	r2, r0, r2
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	430a      	orrs	r2, r1
 80004a6:	fbb3 f8fe 	udiv	r8, r3, lr
 80004aa:	b2bc      	uxth	r4, r7
 80004ac:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b0:	0c11      	lsrs	r1, r2, #16
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb08 f904 	mul.w	r9, r8, r4
 80004ba:	40b0      	lsls	r0, r6
 80004bc:	4589      	cmp	r9, r1
 80004be:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c2:	b280      	uxth	r0, r0
 80004c4:	d93e      	bls.n	8000544 <__udivmoddi4+0x2e8>
 80004c6:	1879      	adds	r1, r7, r1
 80004c8:	f108 3cff 	add.w	ip, r8, #4294967295
 80004cc:	d201      	bcs.n	80004d2 <__udivmoddi4+0x276>
 80004ce:	4589      	cmp	r9, r1
 80004d0:	d81f      	bhi.n	8000512 <__udivmoddi4+0x2b6>
 80004d2:	eba1 0109 	sub.w	r1, r1, r9
 80004d6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004da:	fb09 f804 	mul.w	r8, r9, r4
 80004de:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e2:	b292      	uxth	r2, r2
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d229      	bcs.n	8000540 <__udivmoddi4+0x2e4>
 80004ec:	18ba      	adds	r2, r7, r2
 80004ee:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f2:	d2c4      	bcs.n	800047e <__udivmoddi4+0x222>
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d2c2      	bcs.n	800047e <__udivmoddi4+0x222>
 80004f8:	f1a9 0102 	sub.w	r1, r9, #2
 80004fc:	443a      	add	r2, r7
 80004fe:	e7be      	b.n	800047e <__udivmoddi4+0x222>
 8000500:	45f0      	cmp	r8, lr
 8000502:	d29d      	bcs.n	8000440 <__udivmoddi4+0x1e4>
 8000504:	ebbe 0302 	subs.w	r3, lr, r2
 8000508:	eb6c 0c07 	sbc.w	ip, ip, r7
 800050c:	3801      	subs	r0, #1
 800050e:	46e1      	mov	r9, ip
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1e4>
 8000512:	eba7 0909 	sub.w	r9, r7, r9
 8000516:	4449      	add	r1, r9
 8000518:	f1a8 0c02 	sub.w	ip, r8, #2
 800051c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000520:	fb09 f804 	mul.w	r8, r9, r4
 8000524:	e7db      	b.n	80004de <__udivmoddi4+0x282>
 8000526:	4673      	mov	r3, lr
 8000528:	e77f      	b.n	800042a <__udivmoddi4+0x1ce>
 800052a:	4650      	mov	r0, sl
 800052c:	e766      	b.n	80003fc <__udivmoddi4+0x1a0>
 800052e:	4608      	mov	r0, r1
 8000530:	e6fd      	b.n	800032e <__udivmoddi4+0xd2>
 8000532:	443b      	add	r3, r7
 8000534:	3a02      	subs	r2, #2
 8000536:	e733      	b.n	80003a0 <__udivmoddi4+0x144>
 8000538:	f1ac 0c02 	sub.w	ip, ip, #2
 800053c:	443b      	add	r3, r7
 800053e:	e71c      	b.n	800037a <__udivmoddi4+0x11e>
 8000540:	4649      	mov	r1, r9
 8000542:	e79c      	b.n	800047e <__udivmoddi4+0x222>
 8000544:	eba1 0109 	sub.w	r1, r1, r9
 8000548:	46c4      	mov	ip, r8
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	e7c4      	b.n	80004de <__udivmoddi4+0x282>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_GPIO_Init+0x78>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <MX_GPIO_Init+0x78>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <MX_GPIO_Init+0x7c>)
 80005a6:	f000 ffd3 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 80005aa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <MX_GPIO_Init+0x7c>)
 80005c4:	f000 fe18 	bl	80011f8 <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020400 	.word	0x40020400

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b0aa      	sub	sp, #168	@ 0xa8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005de:	f000 f9c7 	bl	8000970 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fc4e 	bl	8000e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f967 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f7ff ffb5 	bl	8000558 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 fb8f 	bl	8000d10 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80005f2:	f000 fa55 	bl	8000aa0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f6:	f000 faa7 	bl	8000b48 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005fa:	f000 faf3 	bl	8000be4 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char c;
  char tableau[100];
  size_t compteur = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char erreur[] = "\n\rValeur invalide\r\n";
 8000604:	4ba1      	ldr	r3, [pc, #644]	@ (800088c <main+0x2b4>)
 8000606:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	6023      	str	r3, [r4, #0]
  char on[]="\n\rLED allumée\r\n";
 8000614:	4b9e      	ldr	r3, [pc, #632]	@ (8000890 <main+0x2b8>)
 8000616:	f107 0414 	add.w	r4, r7, #20
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	682b      	ldr	r3, [r5, #0]
 8000622:	7023      	strb	r3, [r4, #0]
  char off[]="\n\rLED éteinte\r\n";
 8000624:	4b9b      	ldr	r3, [pc, #620]	@ (8000894 <main+0x2bc>)
 8000626:	463c      	mov	r4, r7
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	682b      	ldr	r3, [r5, #0]
 8000630:	7023      	strb	r3, [r4, #0]
  while (1)
  {
	  if (HAL_UART_Receive(&huart3, (uint8_t*)&c, 1, HAL_MAX_DELAY) == HAL_OK){
 8000632:	f107 01a3 	add.w	r1, r7, #163	@ 0xa3
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	4896      	ldr	r0, [pc, #600]	@ (8000898 <main+0x2c0>)
 800063e:	f002 fbe8 	bl	8002e12 <HAL_UART_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f4      	bne.n	8000632 <main+0x5a>
		  if (c == '\r'){
 8000648:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800064c:	2b0d      	cmp	r3, #13
 800064e:	f040 8106 	bne.w	800085e <main+0x286>
		  	tableau[compteur] = '\0';
 8000652:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800065a:	4413      	add	r3, r2
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		  	if (strcmp(tableau,"LED 1 ON") == 0){
 8000660:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000664:	498d      	ldr	r1, [pc, #564]	@ (800089c <main+0x2c4>)
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdce 	bl	8000208 <strcmp>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d11d      	bne.n	80006ae <main+0xd6>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	488a      	ldr	r0, [pc, #552]	@ (80008a0 <main+0x2c8>)
 8000678:	f000 ff6a 	bl	8001550 <HAL_GPIO_WritePin>
		  		 memset(tableau, 0, sizeof(tableau));
 800067c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000680:	2264      	movs	r2, #100	@ 0x64
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f003 f8bb 	bl	8003800 <memset>
		  		 compteur = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  		 HAL_UART_Transmit(&huart3, (uint8_t*)on, strlen(on), HAL_MAX_DELAY);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fdc1 	bl	800021c <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	f107 0114 	add.w	r1, r7, #20
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	487c      	ldr	r0, [pc, #496]	@ (8000898 <main+0x2c0>)
 80006a8:	f002 fb2a 	bl	8002d00 <HAL_UART_Transmit>
 80006ac:	e7c1      	b.n	8000632 <main+0x5a>
		  		}
		  	else if(strcmp(tableau,"LED 1 OFF") == 0){
 80006ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006b2:	497c      	ldr	r1, [pc, #496]	@ (80008a4 <main+0x2cc>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fda7 	bl	8000208 <strcmp>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d11b      	bne.n	80006f8 <main+0x120>
		  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	4876      	ldr	r0, [pc, #472]	@ (80008a0 <main+0x2c8>)
 80006c6:	f000 ff43 	bl	8001550 <HAL_GPIO_WritePin>
		  		memset(tableau, 0, sizeof(tableau));
 80006ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006ce:	2264      	movs	r2, #100	@ 0x64
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f894 	bl	8003800 <memset>
		  		compteur = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  		HAL_UART_Transmit(&huart3, (uint8_t*)off, strlen(off), HAL_MAX_DELAY);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd9b 	bl	800021c <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4639      	mov	r1, r7
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	4869      	ldr	r0, [pc, #420]	@ (8000898 <main+0x2c0>)
 80006f2:	f002 fb05 	bl	8002d00 <HAL_UART_Transmit>
 80006f6:	e79c      	b.n	8000632 <main+0x5a>
		  		}
			else if(strcmp(tableau,"LED 2 ON") == 0){
 80006f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fc:	496a      	ldr	r1, [pc, #424]	@ (80008a8 <main+0x2d0>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd82 	bl	8000208 <strcmp>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d11d      	bne.n	8000746 <main+0x16e>
				  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	4864      	ldr	r0, [pc, #400]	@ (80008a0 <main+0x2c8>)
 8000710:	f000 ff1e 	bl	8001550 <HAL_GPIO_WritePin>
				  		memset(tableau, 0, sizeof(tableau));
 8000714:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000718:	2264      	movs	r2, #100	@ 0x64
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f86f 	bl	8003800 <memset>
				  		compteur = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
				  		HAL_UART_Transmit(&huart3, (uint8_t*)on, strlen(on), HAL_MAX_DELAY);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd75 	bl	800021c <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f107 0114 	add.w	r1, r7, #20
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	4856      	ldr	r0, [pc, #344]	@ (8000898 <main+0x2c0>)
 8000740:	f002 fade 	bl	8002d00 <HAL_UART_Transmit>
 8000744:	e775      	b.n	8000632 <main+0x5a>
				  		}
			else if(strcmp(tableau,"LED 2 OFF") == 0){
 8000746:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800074a:	4958      	ldr	r1, [pc, #352]	@ (80008ac <main+0x2d4>)
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd5b 	bl	8000208 <strcmp>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d11b      	bne.n	8000790 <main+0x1b8>
				  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2180      	movs	r1, #128	@ 0x80
 800075c:	4850      	ldr	r0, [pc, #320]	@ (80008a0 <main+0x2c8>)
 800075e:	f000 fef7 	bl	8001550 <HAL_GPIO_WritePin>
				  		memset(tableau, 0, sizeof(tableau));
 8000762:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000766:	2264      	movs	r2, #100	@ 0x64
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f848 	bl	8003800 <memset>
				  		compteur = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
				  		HAL_UART_Transmit(&huart3, (uint8_t*)off, strlen(off), HAL_MAX_DELAY);
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd4f 	bl	800021c <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	4639      	mov	r1, r7
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	4843      	ldr	r0, [pc, #268]	@ (8000898 <main+0x2c0>)
 800078a:	f002 fab9 	bl	8002d00 <HAL_UART_Transmit>
 800078e:	e750      	b.n	8000632 <main+0x5a>
				  		}
			else if(strcmp(tableau,"LED 3 ON") == 0){
 8000790:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000794:	4946      	ldr	r1, [pc, #280]	@ (80008b0 <main+0x2d8>)
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd36 	bl	8000208 <strcmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d11e      	bne.n	80007e0 <main+0x208>
							  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a8:	483d      	ldr	r0, [pc, #244]	@ (80008a0 <main+0x2c8>)
 80007aa:	f000 fed1 	bl	8001550 <HAL_GPIO_WritePin>
							  		memset(tableau, 0, sizeof(tableau));
 80007ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007b2:	2264      	movs	r2, #100	@ 0x64
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 f822 	bl	8003800 <memset>
							  		compteur = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							  		HAL_UART_Transmit(&huart3, (uint8_t*)on, strlen(on), HAL_MAX_DELAY);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd28 	bl	800021c <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f107 0114 	add.w	r1, r7, #20
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	482f      	ldr	r0, [pc, #188]	@ (8000898 <main+0x2c0>)
 80007da:	f002 fa91 	bl	8002d00 <HAL_UART_Transmit>
 80007de:	e728      	b.n	8000632 <main+0x5a>
							  		}
			else if(strcmp(tableau,"LED 3 OFF") == 0){
 80007e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007e4:	4933      	ldr	r1, [pc, #204]	@ (80008b4 <main+0x2dc>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fd0e 	bl	8000208 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d11c      	bne.n	800082c <main+0x254>
							  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f8:	4829      	ldr	r0, [pc, #164]	@ (80008a0 <main+0x2c8>)
 80007fa:	f000 fea9 	bl	8001550 <HAL_GPIO_WritePin>
							  		memset(tableau, 0, sizeof(tableau));
 80007fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000802:	2264      	movs	r2, #100	@ 0x64
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fffa 	bl	8003800 <memset>
							  		compteur = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							  		HAL_UART_Transmit(&huart3, (uint8_t*)off, strlen(off), HAL_MAX_DELAY);
 8000812:	463b      	mov	r3, r7
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fd01 	bl	800021c <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	4639      	mov	r1, r7
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	481c      	ldr	r0, [pc, #112]	@ (8000898 <main+0x2c0>)
 8000826:	f002 fa6b 	bl	8002d00 <HAL_UART_Transmit>
 800082a:	e702      	b.n	8000632 <main+0x5a>
							  		}
		  	else{
		  		HAL_UART_Transmit(&huart3, (uint8_t*)erreur, strlen(erreur), HAL_MAX_DELAY);
 800082c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fcf3 	bl	800021c <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	4815      	ldr	r0, [pc, #84]	@ (8000898 <main+0x2c0>)
 8000844:	f002 fa5c 	bl	8002d00 <HAL_UART_Transmit>
		  		memset(tableau, 0, sizeof(tableau));
 8000848:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800084c:	2264      	movs	r2, #100	@ 0x64
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f002 ffd5 	bl	8003800 <memset>
		  		compteur = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800085c:	e6e9      	b.n	8000632 <main+0x5a>
		  		}

		 }
		  else{
		  	tableau[compteur] = c;
 800085e:	f897 10a3 	ldrb.w	r1, [r7, #163]	@ 0xa3
 8000862:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800086a:	4413      	add	r3, r2
 800086c:	460a      	mov	r2, r1
 800086e:	701a      	strb	r2, [r3, #0]
		  	HAL_UART_Transmit(&huart3, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8000870:	f107 01a3 	add.w	r1, r7, #163	@ 0xa3
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	2201      	movs	r2, #1
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <main+0x2c0>)
 800087c:	f002 fa40 	bl	8002d00 <HAL_UART_Transmit>
		  	compteur++;
 8000880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000884:	3301      	adds	r3, #1
 8000886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	  if (HAL_UART_Receive(&huart3, (uint8_t*)&c, 1, HAL_MAX_DELAY) == HAL_OK){
 800088a:	e6d2      	b.n	8000632 <main+0x5a>
 800088c:	080038b8 	.word	0x080038b8
 8000890:	080038cc 	.word	0x080038cc
 8000894:	080038e0 	.word	0x080038e0
 8000898:	2000010c 	.word	0x2000010c
 800089c:	08003870 	.word	0x08003870
 80008a0:	40020400 	.word	0x40020400
 80008a4:	0800387c 	.word	0x0800387c
 80008a8:	08003888 	.word	0x08003888
 80008ac:	08003894 	.word	0x08003894
 80008b0:	080038a0 	.word	0x080038a0
 80008b4:	080038ac 	.word	0x080038ac

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	@ 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 ff9a 	bl	8003800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <SystemClock_Config+0xb0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <SystemClock_Config+0xb0>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <SystemClock_Config+0xb0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <SystemClock_Config+0xb4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <SystemClock_Config+0xb4>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <SystemClock_Config+0xb4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2310      	movs	r3, #16
 800091a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fe2d 	bl	8001584 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000930:	f000 f84a 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f8bc 	bl	8001acc <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800095a:	f000 f835 	bl	80009c8 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	@ 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000982:	f000 fbc1 	bl	8001108 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000986:	2301      	movs	r3, #1
 8000988:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800098a:	2300      	movs	r3, #0
 800098c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000992:	231f      	movs	r3, #31
 8000994:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000996:	2387      	movs	r3, #135	@ 0x87
 8000998:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800099a:	2300      	movs	r3, #0
 800099c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800099e:	2300      	movs	r3, #0
 80009a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a2:	2301      	movs	r3, #1
 80009a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fbdf 	bl	8001178 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009ba:	2004      	movs	r0, #4
 80009bc:	f000 fbbc 	bl	8001138 <HAL_MPU_Enable>

}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x44>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 fa43 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000abe:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000ac0:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <MX_TIM1_Init+0xa4>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000ac6:	227f      	movs	r2, #127	@ 0x7f
 8000ac8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aea:	4815      	ldr	r0, [pc, #84]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000aec:	f001 fdc4 	bl	8002678 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000af6:	f7ff ff67 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	480e      	ldr	r0, [pc, #56]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000b08:	f001 fe0e 	bl	8002728 <HAL_TIM_ConfigClockSource>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b12:	f7ff ff59 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_TIM1_Init+0xa0>)
 8000b28:	f002 f80e 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b32:	f7ff ff49 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000028 	.word	0x20000028
 8000b44:	40010000 	.word	0x40010000

08000b48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <MX_TIM3_Init+0x98>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 255;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b6e:	22ff      	movs	r2, #255	@ 0xff
 8000b70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b8c:	4813      	ldr	r0, [pc, #76]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000b8e:	f001 fd73 	bl	8002678 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b98:	f7ff ff16 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000baa:	f001 fdbd 	bl	8002728 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f7ff ff08 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_TIM3_Init+0x94>)
 8000bc6:	f001 ffbf 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bd0:	f7ff fefa 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000074 	.word	0x20000074
 8000be0:	40000400 	.word	0x40000400

08000be4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c04:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <MX_TIM4_Init+0x98>)
 8000c06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c28:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c2a:	f001 fd25 	bl	8002678 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c34:	f7ff fec8 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c46:	f001 fd6f 	bl	8002728 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c50:	f7ff feba 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_TIM4_Init+0x94>)
 8000c62:	f001 ff71 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f7ff feac 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000c0 	.word	0x200000c0
 8000c7c:	40000800 	.word	0x40000800

08000c80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d00 <HAL_TIM_Base_MspInit+0x80>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10c      	bne.n	8000cac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000caa:	e022      	b.n	8000cf2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <HAL_TIM_Base_MspInit+0x88>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
}
 8000cce:	e010      	b.n	8000cf2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <HAL_TIM_Base_MspInit+0x8c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <HAL_TIM_Base_MspInit+0x84>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40010000 	.word	0x40010000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	40000800 	.word	0x40000800

08000d10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d16:	4a15      	ldr	r2, [pc, #84]	@ (8000d6c <MX_USART3_UART_Init+0x5c>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_USART3_UART_Init+0x58>)
 8000d54:	f001 ff86 	bl	8002c64 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d5e:	f7ff fe33 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000010c 	.word	0x2000010c
 8000d6c:	40004800 	.word	0x40004800

08000d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0aa      	sub	sp, #168	@ 0xa8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2284      	movs	r2, #132	@ 0x84
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fd35 	bl	8003800 <memset>
  if(uartHandle->Instance==USART3)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a22      	ldr	r2, [pc, #136]	@ (8000e24 <HAL_UART_MspInit+0xb4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d13c      	bne.n	8000e1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f872 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dba:	f7ff fe05 	bl	80009c8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_UART_MspInit+0xb8>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a19      	ldr	r2, [pc, #100]	@ (8000e28 <HAL_UART_MspInit+0xb8>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_UART_MspInit+0xb8>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_UART_MspInit+0xb8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a13      	ldr	r2, [pc, #76]	@ (8000e28 <HAL_UART_MspInit+0xb8>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_UART_MspInit+0xb8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000df2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_UART_MspInit+0xbc>)
 8000e16:	f000 f9ef 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	37a8      	adds	r7, #168	@ 0xa8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40004800 	.word	0x40004800
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e34:	f7ff fe22 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 fcd7 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fbb9 	bl	80005d8 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e74:	0800391c 	.word	0x0800391c
  ldr r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e7c:	20000198 	.word	0x20000198

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>

08000e82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f90a 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	f000 f805 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fd9f 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f917 	bl	80010ee <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f8ed 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000194 	.word	0x20000194

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000194 	.word	0x20000194

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	05fa0000 	.word	0x05fa0000

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff47 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff5c 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffb0 	bl	800105c <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800110c:	f3bf 8f5f 	dmb	sy
}
 8001110:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <HAL_MPU_Disable+0x28>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_MPU_Disable+0x28>)
 8001118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800111e:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_MPU_Disable+0x2c>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	e000ed90 	.word	0xe000ed90

08001138 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_MPU_Enable+0x38>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_MPU_Enable+0x3c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_MPU_Enable+0x3c>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001156:	f3bf 8f4f 	dsb	sy
}
 800115a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115c:	f3bf 8f6f 	isb	sy
}
 8001160:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed90 	.word	0xe000ed90
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	785a      	ldrb	r2, [r3, #1]
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001186:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <HAL_MPU_ConfigRegion+0x7c>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <HAL_MPU_ConfigRegion+0x7c>)
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001194:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7b1b      	ldrb	r3, [r3, #12]
 80011a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7adb      	ldrb	r3, [r3, #11]
 80011a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7a9b      	ldrb	r3, [r3, #10]
 80011ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b5b      	ldrb	r3, [r3, #13]
 80011b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b9b      	ldrb	r3, [r3, #14]
 80011be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7bdb      	ldrb	r3, [r3, #15]
 80011c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7a5b      	ldrb	r3, [r3, #9]
 80011ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
 80011d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e4:	6113      	str	r3, [r2, #16]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed90 	.word	0xe000ed90

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e175      	b.n	8001504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8164 	bne.w	80014fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_GPIO_Init+0x56>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80be 	beq.w	80014fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b66      	ldr	r3, [pc, #408]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_GPIO_Init+0x324>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800139a:	4a61      	ldr	r2, [pc, #388]	@ (8001520 <HAL_GPIO_Init+0x328>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d037      	beq.n	8001436 <HAL_GPIO_Init+0x23e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a57      	ldr	r2, [pc, #348]	@ (8001528 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0x23a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a56      	ldr	r2, [pc, #344]	@ (800152c <HAL_GPIO_Init+0x334>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x236>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a55      	ldr	r2, [pc, #340]	@ (8001530 <HAL_GPIO_Init+0x338>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x232>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a54      	ldr	r2, [pc, #336]	@ (8001534 <HAL_GPIO_Init+0x33c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <HAL_GPIO_Init+0x340>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x22a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	@ (800153c <HAL_GPIO_Init+0x344>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	@ (8001540 <HAL_GPIO_Init+0x348>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	@ (8001544 <HAL_GPIO_Init+0x34c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	@ (8001548 <HAL_GPIO_Init+0x350>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x21a>
 800140e:	2309      	movs	r3, #9
 8001410:	e012      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001412:	230a      	movs	r3, #10
 8001414:	e010      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001416:	2308      	movs	r3, #8
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141a:	2307      	movs	r3, #7
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x240>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x240>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	@ (8001520 <HAL_GPIO_Init+0x328>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <HAL_GPIO_Init+0x354>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a34      	ldr	r2, [pc, #208]	@ (800154c <HAL_GPIO_Init+0x354>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_GPIO_Init+0x354>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a29      	ldr	r2, [pc, #164]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <HAL_GPIO_Init+0x354>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae86 	bls.w	8001218 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40022000 	.word	0x40022000
 8001548:	40022400 	.word	0x40022400
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e291      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8087 	beq.w	80016b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b4:	4b93      	ldr	r3, [pc, #588]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62>
 80015c0:	4b90      	ldr	r3, [pc, #576]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015cc:	d10b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d06c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x130>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d168      	bne.n	80016b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e26b      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a>
 80015f0:	4b84      	ldr	r3, [pc, #528]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a83      	ldr	r2, [pc, #524]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e02e      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x9c>
 8001606:	4b7f      	ldr	r3, [pc, #508]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7e      	ldr	r2, [pc, #504]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b7c      	ldr	r3, [pc, #496]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7b      	ldr	r2, [pc, #492]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0xc0>
 800162a:	4b76      	ldr	r3, [pc, #472]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a75      	ldr	r2, [pc, #468]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a72      	ldr	r2, [pc, #456]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 8001644:	4b6f      	ldr	r3, [pc, #444]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6e      	ldr	r2, [pc, #440]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b6c      	ldr	r3, [pc, #432]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6b      	ldr	r2, [pc, #428]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fc5e 	bl	8000f24 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fc5a 	bl	8000f24 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e21f      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fc4a 	bl	8000f24 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fc46 	bl	8000f24 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e20b      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b57      	ldr	r3, [pc, #348]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x110>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d069      	beq.n	8001796 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c2:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x190>
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x17a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1df      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	493d      	ldr	r1, [pc, #244]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e040      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a38      	ldr	r2, [pc, #224]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fbfc 	bl	8000f24 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fbf8 	bl	8000f24 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1bd      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4929      	ldr	r1, [pc, #164]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
 8001762:	e018      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a26      	ldr	r2, [pc, #152]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fbd8 	bl	8000f24 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fbd4 	bl	8000f24 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e199      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d038      	beq.n	8001814 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ae:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbb5 	bl	8000f24 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fbb1 	bl	8000f24 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e176      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x23a>
 80017dc:	e01a      	b.n	8001814 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb9b 	bl	8000f24 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb97 	bl	8000f24 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d903      	bls.n	8001808 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e15c      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
 8001804:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b91      	ldr	r3, [pc, #580]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800180a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1ee      	bne.n	80017f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a4 	beq.w	800196a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b8b      	ldr	r3, [pc, #556]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a87      	ldr	r2, [pc, #540]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b85      	ldr	r3, [pc, #532]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	4b82      	ldr	r3, [pc, #520]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001856:	4b7f      	ldr	r3, [pc, #508]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff fb5f 	bl	8000f24 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff fb5b 	bl	8000f24 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	@ 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e120      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x31a>
 8001890:	4b6f      	ldr	r3, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001894:	4a6e      	ldr	r2, [pc, #440]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	@ 0x70
 800189c:	e02d      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x33c>
 80018a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	4a69      	ldr	r2, [pc, #420]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b2:	4b67      	ldr	r3, [pc, #412]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	4a66      	ldr	r2, [pc, #408]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018be:	e01c      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x35e>
 80018c8:	4b61      	ldr	r3, [pc, #388]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a60      	ldr	r2, [pc, #384]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
 80018e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ee:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	4a57      	ldr	r2, [pc, #348]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d015      	beq.n	800192e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff fb0f 	bl	8000f24 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff fb0b 	bl	8000f24 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0ce      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	4b4b      	ldr	r3, [pc, #300]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0ee      	beq.n	800190a <HAL_RCC_OscConfig+0x386>
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff faf9 	bl	8000f24 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff faf5 	bl	8000f24 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a3b      	ldr	r2, [pc, #236]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80a4 	beq.w	8001abc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d06b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d149      	bne.n	8001a1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a30      	ldr	r2, [pc, #192]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fac6 	bl	8000f24 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fac2 	bl	8000f24 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e087      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	4313      	orrs	r3, r2
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a18      	ldr	r2, [pc, #96]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fa96 	bl	8000f24 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fa92 	bl	8000f24 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e057      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x478>
 8001a1a:	e04f      	b.n	8001abc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa7c 	bl	8000f24 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fa78 	bl	8000f24 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e03d      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4ac>
 8001a4e:	e035      	b.n	8001abc <HAL_RCC_OscConfig+0x538>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x544>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d121      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d0      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b67      	ldr	r3, [pc, #412]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 020f 	bic.w	r2, r3, #15
 8001afa:	4965      	ldr	r1, [pc, #404]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b8      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b2c:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a58      	ldr	r2, [pc, #352]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b44:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a52      	ldr	r2, [pc, #328]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b50      	ldr	r3, [pc, #320]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	494d      	ldr	r1, [pc, #308]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d040      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e073      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4936      	ldr	r1, [pc, #216]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc0:	f7ff f9b0 	bl	8000f24 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff f9ac 	bl	8000f24 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e053      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d210      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 020f 	bic.w	r2, r3, #15
 8001c06:	4922      	ldr	r1, [pc, #136]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e032      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4916      	ldr	r1, [pc, #88]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490e      	ldr	r1, [pc, #56]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5e:	f000 f821 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490a      	ldr	r1, [pc, #40]	@ (8001c98 <HAL_RCC_ClockConfig+0x1cc>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_RCC_ClockConfig+0x1d0>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1d4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f90c 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	080038f4 	.word	0x080038f4
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b090      	sub	sp, #64	@ 0x40
 8001caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cbc:	4b59      	ldr	r3, [pc, #356]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	f200 80a1 	bhi.w	8001e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x3a>
 8001cd6:	e09b      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cdc:	e09b      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cde:	4b53      	ldr	r3, [pc, #332]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ce2:	e098      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cee:	4b4d      	ldr	r3, [pc, #308]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d028      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	2200      	movs	r2, #0
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d10:	fb03 f201 	mul.w	r2, r3, r1
 8001d14:	2300      	movs	r3, #0
 8001d16:	fb00 f303 	mul.w	r3, r0, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a43      	ldr	r2, [pc, #268]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d24:	460a      	mov	r2, r1
 8001d26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d2a:	4413      	add	r3, r2
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d30:	2200      	movs	r2, #0
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	61fa      	str	r2, [r7, #28]
 8001d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d3e:	f7fe fa75 	bl	800022c <__aeabi_uldivmod>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4613      	mov	r3, r2
 8001d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d4a:	e053      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4c:	4b35      	ldr	r3, [pc, #212]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	2200      	movs	r2, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	617a      	str	r2, [r7, #20]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d5e:	f04f 0b00 	mov.w	fp, #0
 8001d62:	4652      	mov	r2, sl
 8001d64:	465b      	mov	r3, fp
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	0159      	lsls	r1, r3, #5
 8001d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d74:	0150      	lsls	r0, r2, #5
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d96:	ebb2 0408 	subs.w	r4, r2, r8
 8001d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	00eb      	lsls	r3, r5, #3
 8001da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dac:	00e2      	lsls	r2, r4, #3
 8001dae:	4614      	mov	r4, r2
 8001db0:	461d      	mov	r5, r3
 8001db2:	eb14 030a 	adds.w	r3, r4, sl
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	eb45 030b 	adc.w	r3, r5, fp
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dca:	4629      	mov	r1, r5
 8001dcc:	028b      	lsls	r3, r1, #10
 8001dce:	4621      	mov	r1, r4
 8001dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	028a      	lsls	r2, r1, #10
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dde:	2200      	movs	r2, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	60fa      	str	r2, [r7, #12]
 8001de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de8:	f7fe fa20 	bl	800022c <__aeabi_uldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4613      	mov	r3, r2
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3740      	adds	r7, #64	@ 0x40
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	017d7840 	.word	0x017d7840

08001e30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	08003904 	.word	0x08003904

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffdc 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0b5b      	lsrs	r3, r3, #13
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08003904 	.word	0x08003904

08001e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d012      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ec0:	4b69      	ldr	r3, [pc, #420]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001eca:	6093      	str	r3, [r2, #8]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed4:	4964      	ldr	r1, [pc, #400]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d017      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f00:	4959      	ldr	r1, [pc, #356]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f10:	d101      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d017      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	494a      	ldr	r1, [pc, #296]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 808b 	beq.w	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a39      	ldr	r2, [pc, #228]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f88:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f94:	4b35      	ldr	r3, [pc, #212]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a34      	ldr	r2, [pc, #208]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa0:	f7fe ffc0 	bl	8000f24 <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7fe ffbc 	bl	8000f24 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e357      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fba:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc6:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d035      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d02e      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe4:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002004:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d114      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe ff84 	bl	8000f24 <HAL_GetTick>
 800201c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	e00a      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe ff80 	bl	8000f24 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e319      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ee      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800204e:	d111      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800205e:	400b      	ands	r3, r1
 8002060:	4901      	ldr	r1, [pc, #4]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
 8002066:	e00b      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000
 8002070:	0ffffcff 	.word	0x0ffffcff
 8002074:	4baa      	ldr	r3, [pc, #680]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4aa9      	ldr	r2, [pc, #676]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800207e:	6093      	str	r3, [r2, #8]
 8002080:	4ba7      	ldr	r3, [pc, #668]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002082:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	49a4      	ldr	r1, [pc, #656]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208e:	4313      	orrs	r3, r2
 8002090:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800209e:	4ba0      	ldr	r3, [pc, #640]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a4:	4a9e      	ldr	r2, [pc, #632]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020ae:	4b9c      	ldr	r3, [pc, #624]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b8:	4999      	ldr	r1, [pc, #612]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020cc:	4b94      	ldr	r3, [pc, #592]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020da:	4991      	ldr	r1, [pc, #580]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020fc:	4988      	ldr	r1, [pc, #544]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002110:	4b83      	ldr	r3, [pc, #524]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211e:	4980      	ldr	r1, [pc, #512]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002132:	4b7b      	ldr	r3, [pc, #492]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002138:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	4977      	ldr	r1, [pc, #476]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002154:	4b72      	ldr	r3, [pc, #456]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	f023 0203 	bic.w	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	496f      	ldr	r1, [pc, #444]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002176:	4b6a      	ldr	r3, [pc, #424]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217c:	f023 020c 	bic.w	r2, r3, #12
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002184:	4966      	ldr	r1, [pc, #408]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002198:	4b61      	ldr	r3, [pc, #388]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	495e      	ldr	r1, [pc, #376]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ba:	4b59      	ldr	r3, [pc, #356]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c8:	4955      	ldr	r1, [pc, #340]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021dc:	4b50      	ldr	r3, [pc, #320]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	494d      	ldr	r1, [pc, #308]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021fe:	4b48      	ldr	r3, [pc, #288]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002204:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	4944      	ldr	r1, [pc, #272]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002220:	4b3f      	ldr	r3, [pc, #252]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	493c      	ldr	r1, [pc, #240]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002242:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002248:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002250:	4933      	ldr	r1, [pc, #204]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002264:	4b2e      	ldr	r3, [pc, #184]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002272:	492b      	ldr	r1, [pc, #172]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d011      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002294:	4922      	ldr	r1, [pc, #136]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022a4:	d101      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d4:	4912      	ldr	r1, [pc, #72]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f8:	4909      	ldr	r1, [pc, #36]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d006      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80d9 	beq.w	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002314:	4b02      	ldr	r3, [pc, #8]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a01      	ldr	r2, [pc, #4]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800231e:	e001      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002320:	40023800 	.word	0x40023800
 8002324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002326:	f7fe fdfd 	bl	8000f24 <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800232e:	f7fe fdf9 	bl	8000f24 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	@ 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e194      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002340:	4b6c      	ldr	r3, [pc, #432]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d021      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11d      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002360:	4b64      	ldr	r3, [pc, #400]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800236e:	4b61      	ldr	r3, [pc, #388]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002374:	0e1b      	lsrs	r3, r3, #24
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	019a      	lsls	r2, r3, #6
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	071b      	lsls	r3, r3, #28
 8002394:	4957      	ldr	r1, [pc, #348]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02e      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023c6:	d129      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023c8:	4b4a      	ldr	r3, [pc, #296]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023d6:	4b47      	ldr	r3, [pc, #284]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023dc:	0f1b      	lsrs	r3, r3, #28
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	019a      	lsls	r2, r3, #6
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	071b      	lsls	r3, r3, #28
 80023fc:	493d      	ldr	r1, [pc, #244]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002404:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240a:	f023 021f 	bic.w	r2, r3, #31
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	3b01      	subs	r3, #1
 8002414:	4937      	ldr	r1, [pc, #220]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01d      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002428:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800242e:	0e1b      	lsrs	r3, r3, #24
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800243c:	0f1b      	lsrs	r3, r3, #28
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	019a      	lsls	r2, r3, #6
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	071b      	lsls	r3, r3, #28
 800245c:	4925      	ldr	r1, [pc, #148]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d011      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	019a      	lsls	r2, r3, #6
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	071b      	lsls	r3, r3, #28
 800248c:	4919      	ldr	r1, [pc, #100]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a16      	ldr	r2, [pc, #88]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800249a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe fd40 	bl	8000f24 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024a8:	f7fe fd3c 	bl	8000f24 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	@ 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0d7      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f040 80cd 	bne.w	8002668 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7fe fd23 	bl	8000f24 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024e2:	f7fe fd1f 	bl	8000f24 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	@ 0x64
 80024ee:	d903      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0ba      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80024f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002504:	d0ed      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002522:	2b00      	cmp	r3, #0
 8002524:	d02e      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d12a      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800252e:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800253c:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	0f1b      	lsrs	r3, r3, #28
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	4944      	ldr	r1, [pc, #272]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800256a:	4b42      	ldr	r3, [pc, #264]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800256c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002570:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	493d      	ldr	r1, [pc, #244]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d022      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002594:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002598:	d11d      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800259a:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	0f1b      	lsrs	r3, r3, #28
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	019a      	lsls	r2, r3, #6
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431a      	orrs	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	071b      	lsls	r3, r3, #28
 80025ce:	4929      	ldr	r1, [pc, #164]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d028      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e8:	0e1b      	lsrs	r3, r3, #24
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f0:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	019a      	lsls	r2, r3, #6
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	431a      	orrs	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	071b      	lsls	r3, r3, #28
 8002616:	4917      	ldr	r1, [pc, #92]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002624:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	4911      	ldr	r1, [pc, #68]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0e      	ldr	r2, [pc, #56]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	f7fe fc70 	bl	8000f24 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002648:	f7fe fc6c 	bl	8000f24 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e007      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002666:	d1ef      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e049      	b.n	800271e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe faee 	bl	8000c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 f900 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIM_ConfigClockSource+0x1c>
 8002740:	2302      	movs	r3, #2
 8002742:	e0b4      	b.n	80028ae <HAL_TIM_ConfigClockSource+0x186>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4b56      	ldr	r3, [pc, #344]	@ (80028b8 <HAL_TIM_ConfigClockSource+0x190>)
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800276a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277c:	d03e      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0xd4>
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002782:	f200 8087 	bhi.w	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278a:	f000 8086 	beq.w	800289a <HAL_TIM_ConfigClockSource+0x172>
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002792:	d87f      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b70      	cmp	r3, #112	@ 0x70
 8002796:	d01a      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xa6>
 8002798:	2b70      	cmp	r3, #112	@ 0x70
 800279a:	d87b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b60      	cmp	r3, #96	@ 0x60
 800279e:	d050      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x11a>
 80027a0:	2b60      	cmp	r3, #96	@ 0x60
 80027a2:	d877      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b50      	cmp	r3, #80	@ 0x50
 80027a6:	d03c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xfa>
 80027a8:	2b50      	cmp	r3, #80	@ 0x50
 80027aa:	d873      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b40      	cmp	r3, #64	@ 0x40
 80027ae:	d058      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x13a>
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d86f      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b30      	cmp	r3, #48	@ 0x30
 80027b6:	d064      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b30      	cmp	r3, #48	@ 0x30
 80027ba:	d86b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d060      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d867      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d05c      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d05a      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x15a>
 80027cc:	e062      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027de:	f000 f993 	bl	8002b08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	609a      	str	r2, [r3, #8]
      break;
 80027fa:	e04f      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800280c:	f000 f97c 	bl	8002b08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800281e:	609a      	str	r2, [r3, #8]
      break;
 8002820:	e03c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	461a      	mov	r2, r3
 8002830:	f000 f8f0 	bl	8002a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2150      	movs	r1, #80	@ 0x50
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f949 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 8002840:	e02c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800284e:	461a      	mov	r2, r3
 8002850:	f000 f90f 	bl	8002a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2160      	movs	r1, #96	@ 0x60
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f939 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 8002860:	e01c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	461a      	mov	r2, r3
 8002870:	f000 f8d0 	bl	8002a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2140      	movs	r1, #64	@ 0x40
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f929 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 8002880:	e00c      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f000 f920 	bl	8002ad2 <TIM_ITRx_SetConfig>
      break;
 8002892:	e003      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e000      	b.n	800289c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800289a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	fffeff88 	.word	0xfffeff88

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a46      	ldr	r2, [pc, #280]	@ (80029e8 <TIM_Base_SetConfig+0x12c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028da:	d00f      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a43      	ldr	r2, [pc, #268]	@ (80029ec <TIM_Base_SetConfig+0x130>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a42      	ldr	r2, [pc, #264]	@ (80029f0 <TIM_Base_SetConfig+0x134>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a41      	ldr	r2, [pc, #260]	@ (80029f4 <TIM_Base_SetConfig+0x138>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <TIM_Base_SetConfig+0x13c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a35      	ldr	r2, [pc, #212]	@ (80029e8 <TIM_Base_SetConfig+0x12c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291c:	d027      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a32      	ldr	r2, [pc, #200]	@ (80029ec <TIM_Base_SetConfig+0x130>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d023      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a31      	ldr	r2, [pc, #196]	@ (80029f0 <TIM_Base_SetConfig+0x134>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a30      	ldr	r2, [pc, #192]	@ (80029f4 <TIM_Base_SetConfig+0x138>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2f      	ldr	r2, [pc, #188]	@ (80029f8 <TIM_Base_SetConfig+0x13c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d017      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2e      	ldr	r2, [pc, #184]	@ (80029fc <TIM_Base_SetConfig+0x140>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a2d      	ldr	r2, [pc, #180]	@ (8002a00 <TIM_Base_SetConfig+0x144>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2c      	ldr	r2, [pc, #176]	@ (8002a04 <TIM_Base_SetConfig+0x148>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a2b      	ldr	r2, [pc, #172]	@ (8002a08 <TIM_Base_SetConfig+0x14c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <TIM_Base_SetConfig+0x150>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <TIM_Base_SetConfig+0x154>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <TIM_Base_SetConfig+0x12c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0xf8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <TIM_Base_SetConfig+0x13c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f023 0201 	bic.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]
  }
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800
 8002a08:	40001800 	.word	0x40001800
 8002a0c:	40001c00 	.word	0x40001c00
 8002a10:	40002000 	.word	0x40002000

08002a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 030a 	bic.w	r3, r3, #10
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 0210 	bic.w	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	031b      	lsls	r3, r3, #12
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002aae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f043 0307 	orr.w	r3, r3, #7
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e06d      	b.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a30      	ldr	r2, [pc, #192]	@ (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002b9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a20      	ldr	r2, [pc, #128]	@ (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d022      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd2:	d01d      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d018      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	@ (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00e      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10c      	bne.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40010400 	.word	0x40010400
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	40001800 	.word	0x40001800

08002c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e040      	b.n	8002cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe f872 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	@ 0x24
 8002c90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fbde 	bl	800346c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f977 	bl	8002fa4 <UART_SetConfig>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e01b      	b.n	8002cf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fc5d 	bl	80035b0 <UART_CheckIdleState>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d177      	bne.n	8002e08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Transmit+0x24>
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e070      	b.n	8002e0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2221      	movs	r2, #33	@ 0x21
 8002d34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d36:	f7fe f8f5 	bl	8000f24 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d54:	d108      	bne.n	8002d68 <HAL_UART_Transmit+0x68>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e003      	b.n	8002d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d70:	e02f      	b.n	8002dd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2180      	movs	r1, #128	@ 0x80
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fc6e 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e03b      	b.n	8002e0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	3302      	adds	r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e007      	b.n	8002dc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1c9      	bne.n	8002d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	@ 0x40
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fc38 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e005      	b.n	8002e0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08a      	sub	sp, #40	@ 0x28
 8002e16:	af02      	add	r7, sp, #8
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	f040 80b5 	bne.w	8002f98 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_UART_Receive+0x28>
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0ad      	b.n	8002f9a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2222      	movs	r2, #34	@ 0x22
 8002e4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e54:	f7fe f866 	bl	8000f24 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	88fa      	ldrh	r2, [r7, #6]
 8002e5e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e72:	d10e      	bne.n	8002e92 <HAL_UART_Receive+0x80>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <HAL_UART_Receive+0x76>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002e82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e86:	e02d      	b.n	8002ee4 <HAL_UART_Receive+0xd2>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	22ff      	movs	r2, #255	@ 0xff
 8002e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e90:	e028      	b.n	8002ee4 <HAL_UART_Receive+0xd2>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_UART_Receive+0xa4>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_UART_Receive+0x9a>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22ff      	movs	r2, #255	@ 0xff
 8002ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eaa:	e01b      	b.n	8002ee4 <HAL_UART_Receive+0xd2>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	227f      	movs	r2, #127	@ 0x7f
 8002eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eb4:	e016      	b.n	8002ee4 <HAL_UART_Receive+0xd2>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ebe:	d10d      	bne.n	8002edc <HAL_UART_Receive+0xca>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <HAL_UART_Receive+0xc0>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	227f      	movs	r2, #127	@ 0x7f
 8002ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ed0:	e008      	b.n	8002ee4 <HAL_UART_Receive+0xd2>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	223f      	movs	r2, #63	@ 0x3f
 8002ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eda:	e003      	b.n	8002ee4 <HAL_UART_Receive+0xd2>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002eea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef4:	d108      	bne.n	8002f08 <HAL_UART_Receive+0xf6>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e003      	b.n	8002f10 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f10:	e036      	b.n	8002f80 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fb9e 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e032      	b.n	8002f9a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	8a7b      	ldrh	r3, [r7, #18]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	3302      	adds	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e00c      	b.n	8002f6e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	8a7b      	ldrh	r3, [r7, #18]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	4013      	ands	r3, r2
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1c2      	bne.n	8002f12 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4ba6      	ldr	r3, [pc, #664]	@ (8003268 <UART_SetConfig+0x2c4>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a94      	ldr	r2, [pc, #592]	@ (800326c <UART_SetConfig+0x2c8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d120      	bne.n	8003062 <UART_SetConfig+0xbe>
 8003020:	4b93      	ldr	r3, [pc, #588]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b03      	cmp	r3, #3
 800302c:	d816      	bhi.n	800305c <UART_SetConfig+0xb8>
 800302e:	a201      	add	r2, pc, #4	@ (adr r2, 8003034 <UART_SetConfig+0x90>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003045 	.word	0x08003045
 8003038:	08003051 	.word	0x08003051
 800303c:	0800304b 	.word	0x0800304b
 8003040:	08003057 	.word	0x08003057
 8003044:	2301      	movs	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e150      	b.n	80032ec <UART_SetConfig+0x348>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e14d      	b.n	80032ec <UART_SetConfig+0x348>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e14a      	b.n	80032ec <UART_SetConfig+0x348>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e147      	b.n	80032ec <UART_SetConfig+0x348>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e144      	b.n	80032ec <UART_SetConfig+0x348>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a83      	ldr	r2, [pc, #524]	@ (8003274 <UART_SetConfig+0x2d0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d132      	bne.n	80030d2 <UART_SetConfig+0x12e>
 800306c:	4b80      	ldr	r3, [pc, #512]	@ (8003270 <UART_SetConfig+0x2cc>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d828      	bhi.n	80030cc <UART_SetConfig+0x128>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <UART_SetConfig+0xdc>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030cd 	.word	0x080030cd
 8003088:	080030cd 	.word	0x080030cd
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030cd 	.word	0x080030cd
 80030a0:	080030bb 	.word	0x080030bb
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030cd 	.word	0x080030cd
 80030b0:	080030c7 	.word	0x080030c7
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e118      	b.n	80032ec <UART_SetConfig+0x348>
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e115      	b.n	80032ec <UART_SetConfig+0x348>
 80030c0:	2304      	movs	r3, #4
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e112      	b.n	80032ec <UART_SetConfig+0x348>
 80030c6:	2308      	movs	r3, #8
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e10f      	b.n	80032ec <UART_SetConfig+0x348>
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e10c      	b.n	80032ec <UART_SetConfig+0x348>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a68      	ldr	r2, [pc, #416]	@ (8003278 <UART_SetConfig+0x2d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0x17a>
 80030dc:	4b64      	ldr	r3, [pc, #400]	@ (8003270 <UART_SetConfig+0x2cc>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030e6:	2b30      	cmp	r3, #48	@ 0x30
 80030e8:	d013      	beq.n	8003112 <UART_SetConfig+0x16e>
 80030ea:	2b30      	cmp	r3, #48	@ 0x30
 80030ec:	d814      	bhi.n	8003118 <UART_SetConfig+0x174>
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d009      	beq.n	8003106 <UART_SetConfig+0x162>
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d810      	bhi.n	8003118 <UART_SetConfig+0x174>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <UART_SetConfig+0x15c>
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x168>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x174>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0f2      	b.n	80032ec <UART_SetConfig+0x348>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e0ef      	b.n	80032ec <UART_SetConfig+0x348>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0ec      	b.n	80032ec <UART_SetConfig+0x348>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e0e9      	b.n	80032ec <UART_SetConfig+0x348>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e0e6      	b.n	80032ec <UART_SetConfig+0x348>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a56      	ldr	r2, [pc, #344]	@ (800327c <UART_SetConfig+0x2d8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d120      	bne.n	800316a <UART_SetConfig+0x1c6>
 8003128:	4b51      	ldr	r3, [pc, #324]	@ (8003270 <UART_SetConfig+0x2cc>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003132:	2bc0      	cmp	r3, #192	@ 0xc0
 8003134:	d013      	beq.n	800315e <UART_SetConfig+0x1ba>
 8003136:	2bc0      	cmp	r3, #192	@ 0xc0
 8003138:	d814      	bhi.n	8003164 <UART_SetConfig+0x1c0>
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	d009      	beq.n	8003152 <UART_SetConfig+0x1ae>
 800313e:	2b80      	cmp	r3, #128	@ 0x80
 8003140:	d810      	bhi.n	8003164 <UART_SetConfig+0x1c0>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <UART_SetConfig+0x1a8>
 8003146:	2b40      	cmp	r3, #64	@ 0x40
 8003148:	d006      	beq.n	8003158 <UART_SetConfig+0x1b4>
 800314a:	e00b      	b.n	8003164 <UART_SetConfig+0x1c0>
 800314c:	2300      	movs	r3, #0
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e0cc      	b.n	80032ec <UART_SetConfig+0x348>
 8003152:	2302      	movs	r3, #2
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e0c9      	b.n	80032ec <UART_SetConfig+0x348>
 8003158:	2304      	movs	r3, #4
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e0c6      	b.n	80032ec <UART_SetConfig+0x348>
 800315e:	2308      	movs	r3, #8
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e0c3      	b.n	80032ec <UART_SetConfig+0x348>
 8003164:	2310      	movs	r3, #16
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e0c0      	b.n	80032ec <UART_SetConfig+0x348>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a44      	ldr	r2, [pc, #272]	@ (8003280 <UART_SetConfig+0x2dc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d125      	bne.n	80031c0 <UART_SetConfig+0x21c>
 8003174:	4b3e      	ldr	r3, [pc, #248]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003182:	d017      	beq.n	80031b4 <UART_SetConfig+0x210>
 8003184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003188:	d817      	bhi.n	80031ba <UART_SetConfig+0x216>
 800318a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318e:	d00b      	beq.n	80031a8 <UART_SetConfig+0x204>
 8003190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003194:	d811      	bhi.n	80031ba <UART_SetConfig+0x216>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <UART_SetConfig+0x1fe>
 800319a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800319e:	d006      	beq.n	80031ae <UART_SetConfig+0x20a>
 80031a0:	e00b      	b.n	80031ba <UART_SetConfig+0x216>
 80031a2:	2300      	movs	r3, #0
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e0a1      	b.n	80032ec <UART_SetConfig+0x348>
 80031a8:	2302      	movs	r3, #2
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e09e      	b.n	80032ec <UART_SetConfig+0x348>
 80031ae:	2304      	movs	r3, #4
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e09b      	b.n	80032ec <UART_SetConfig+0x348>
 80031b4:	2308      	movs	r3, #8
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e098      	b.n	80032ec <UART_SetConfig+0x348>
 80031ba:	2310      	movs	r3, #16
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e095      	b.n	80032ec <UART_SetConfig+0x348>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003284 <UART_SetConfig+0x2e0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d125      	bne.n	8003216 <UART_SetConfig+0x272>
 80031ca:	4b29      	ldr	r3, [pc, #164]	@ (8003270 <UART_SetConfig+0x2cc>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031d8:	d017      	beq.n	800320a <UART_SetConfig+0x266>
 80031da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031de:	d817      	bhi.n	8003210 <UART_SetConfig+0x26c>
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e4:	d00b      	beq.n	80031fe <UART_SetConfig+0x25a>
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ea:	d811      	bhi.n	8003210 <UART_SetConfig+0x26c>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <UART_SetConfig+0x254>
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f4:	d006      	beq.n	8003204 <UART_SetConfig+0x260>
 80031f6:	e00b      	b.n	8003210 <UART_SetConfig+0x26c>
 80031f8:	2301      	movs	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e076      	b.n	80032ec <UART_SetConfig+0x348>
 80031fe:	2302      	movs	r3, #2
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e073      	b.n	80032ec <UART_SetConfig+0x348>
 8003204:	2304      	movs	r3, #4
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e070      	b.n	80032ec <UART_SetConfig+0x348>
 800320a:	2308      	movs	r3, #8
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e06d      	b.n	80032ec <UART_SetConfig+0x348>
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e06a      	b.n	80032ec <UART_SetConfig+0x348>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1b      	ldr	r2, [pc, #108]	@ (8003288 <UART_SetConfig+0x2e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d138      	bne.n	8003292 <UART_SetConfig+0x2ee>
 8003220:	4b13      	ldr	r3, [pc, #76]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800322a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800322e:	d017      	beq.n	8003260 <UART_SetConfig+0x2bc>
 8003230:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003234:	d82a      	bhi.n	800328c <UART_SetConfig+0x2e8>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323a:	d00b      	beq.n	8003254 <UART_SetConfig+0x2b0>
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003240:	d824      	bhi.n	800328c <UART_SetConfig+0x2e8>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <UART_SetConfig+0x2aa>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324a:	d006      	beq.n	800325a <UART_SetConfig+0x2b6>
 800324c:	e01e      	b.n	800328c <UART_SetConfig+0x2e8>
 800324e:	2300      	movs	r3, #0
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e04b      	b.n	80032ec <UART_SetConfig+0x348>
 8003254:	2302      	movs	r3, #2
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e048      	b.n	80032ec <UART_SetConfig+0x348>
 800325a:	2304      	movs	r3, #4
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e045      	b.n	80032ec <UART_SetConfig+0x348>
 8003260:	2308      	movs	r3, #8
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e042      	b.n	80032ec <UART_SetConfig+0x348>
 8003266:	bf00      	nop
 8003268:	efff69f3 	.word	0xefff69f3
 800326c:	40011000 	.word	0x40011000
 8003270:	40023800 	.word	0x40023800
 8003274:	40004400 	.word	0x40004400
 8003278:	40004800 	.word	0x40004800
 800327c:	40004c00 	.word	0x40004c00
 8003280:	40005000 	.word	0x40005000
 8003284:	40011400 	.word	0x40011400
 8003288:	40007800 	.word	0x40007800
 800328c:	2310      	movs	r3, #16
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e02c      	b.n	80032ec <UART_SetConfig+0x348>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a72      	ldr	r2, [pc, #456]	@ (8003460 <UART_SetConfig+0x4bc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d125      	bne.n	80032e8 <UART_SetConfig+0x344>
 800329c:	4b71      	ldr	r3, [pc, #452]	@ (8003464 <UART_SetConfig+0x4c0>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032aa:	d017      	beq.n	80032dc <UART_SetConfig+0x338>
 80032ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032b0:	d817      	bhi.n	80032e2 <UART_SetConfig+0x33e>
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d00b      	beq.n	80032d0 <UART_SetConfig+0x32c>
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032bc:	d811      	bhi.n	80032e2 <UART_SetConfig+0x33e>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <UART_SetConfig+0x326>
 80032c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032c6:	d006      	beq.n	80032d6 <UART_SetConfig+0x332>
 80032c8:	e00b      	b.n	80032e2 <UART_SetConfig+0x33e>
 80032ca:	2300      	movs	r3, #0
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e00d      	b.n	80032ec <UART_SetConfig+0x348>
 80032d0:	2302      	movs	r3, #2
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e00a      	b.n	80032ec <UART_SetConfig+0x348>
 80032d6:	2304      	movs	r3, #4
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e007      	b.n	80032ec <UART_SetConfig+0x348>
 80032dc:	2308      	movs	r3, #8
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e004      	b.n	80032ec <UART_SetConfig+0x348>
 80032e2:	2310      	movs	r3, #16
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e001      	b.n	80032ec <UART_SetConfig+0x348>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f4:	d15b      	bne.n	80033ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d828      	bhi.n	800334e <UART_SetConfig+0x3aa>
 80032fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <UART_SetConfig+0x360>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003329 	.word	0x08003329
 8003308:	08003331 	.word	0x08003331
 800330c:	08003339 	.word	0x08003339
 8003310:	0800334f 	.word	0x0800334f
 8003314:	0800333f 	.word	0x0800333f
 8003318:	0800334f 	.word	0x0800334f
 800331c:	0800334f 	.word	0x0800334f
 8003320:	0800334f 	.word	0x0800334f
 8003324:	08003347 	.word	0x08003347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7fe fd8e 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 800332c:	61b8      	str	r0, [r7, #24]
        break;
 800332e:	e013      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7fe fd9e 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 8003334:	61b8      	str	r0, [r7, #24]
        break;
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003338:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <UART_SetConfig+0x4c4>)
 800333a:	61bb      	str	r3, [r7, #24]
        break;
 800333c:	e00c      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333e:	f7fe fcb1 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003342:	61b8      	str	r0, [r7, #24]
        break;
 8003344:	e008      	b.n	8003358 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800334a:	61bb      	str	r3, [r7, #24]
        break;
 800334c:	e004      	b.n	8003358 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	77bb      	strb	r3, [r7, #30]
        break;
 8003356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d074      	beq.n	8003448 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	005a      	lsls	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d916      	bls.n	80033a8 <UART_SetConfig+0x404>
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d212      	bcs.n	80033a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f023 030f 	bic.w	r3, r3, #15
 800338a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	b29b      	uxth	r3, r3
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	b29a      	uxth	r2, r3
 8003398:	89fb      	ldrh	r3, [r7, #14]
 800339a:	4313      	orrs	r3, r2
 800339c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	89fa      	ldrh	r2, [r7, #14]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e04f      	b.n	8003448 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77bb      	strb	r3, [r7, #30]
 80033ac:	e04c      	b.n	8003448 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d828      	bhi.n	8003406 <UART_SetConfig+0x462>
 80033b4:	a201      	add	r2, pc, #4	@ (adr r2, 80033bc <UART_SetConfig+0x418>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033e9 	.word	0x080033e9
 80033c4:	080033f1 	.word	0x080033f1
 80033c8:	08003407 	.word	0x08003407
 80033cc:	080033f7 	.word	0x080033f7
 80033d0:	08003407 	.word	0x08003407
 80033d4:	08003407 	.word	0x08003407
 80033d8:	08003407 	.word	0x08003407
 80033dc:	080033ff 	.word	0x080033ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7fe fd32 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80033e4:	61b8      	str	r0, [r7, #24]
        break;
 80033e6:	e013      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e8:	f7fe fd42 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80033ec:	61b8      	str	r0, [r7, #24]
        break;
 80033ee:	e00f      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <UART_SetConfig+0x4c4>)
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e00c      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f6:	f7fe fc55 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 80033fa:	61b8      	str	r0, [r7, #24]
        break;
 80033fc:	e008      	b.n	8003410 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003402:	61bb      	str	r3, [r7, #24]
        break;
 8003404:	e004      	b.n	8003410 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	77bb      	strb	r3, [r7, #30]
        break;
 800340e:	bf00      	nop
    }

    if (pclk != 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085a      	lsrs	r2, r3, #1
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d909      	bls.n	8003444 <UART_SetConfig+0x4a0>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003436:	d205      	bcs.n	8003444 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e001      	b.n	8003448 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003454:	7fbb      	ldrb	r3, [r7, #30]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40007c00 	.word	0x40007c00
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400

0800346c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800356a:	d10a      	bne.n	8003582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	@ 0x30
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c0:	f7fd fcb0 	bl	8000f24 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d12e      	bne.n	8003632 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f83b 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d021      	beq.n	8003632 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e6      	bne.n	80035ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e011      	b.n	8003656 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3728      	adds	r7, #40	@ 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	e04f      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d04b      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fd fc54 	bl	8000f24 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <UART_WaitOnFlagUntilTimeout+0x30>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04e      	b.n	8003730 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d037      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b80      	cmp	r3, #128	@ 0x80
 80036a4:	d034      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b40      	cmp	r3, #64	@ 0x40
 80036aa:	d031      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d110      	bne.n	80036dc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2208      	movs	r2, #8
 80036c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f838 	bl	8003738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2208      	movs	r2, #8
 80036cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e029      	b.n	8003730 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ea:	d111      	bne.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f81e 	bl	8003738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e00f      	b.n	8003730 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	429a      	cmp	r2, r3
 800372c:	d0a0      	beq.n	8003670 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b095      	sub	sp, #84	@ 0x54
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003760:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e6      	bne.n	8003740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3308      	adds	r3, #8
 8003778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	61fb      	str	r3, [r7, #28]
   return(result);
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e5      	bne.n	8003772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d118      	bne.n	80037e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037f4:	bf00      	nop
 80037f6:	3754      	adds	r7, #84	@ 0x54
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <memset>:
 8003800:	4402      	add	r2, r0
 8003802:	4603      	mov	r3, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4d0d      	ldr	r5, [pc, #52]	@ (8003848 <__libc_init_array+0x38>)
 8003814:	4c0d      	ldr	r4, [pc, #52]	@ (800384c <__libc_init_array+0x3c>)
 8003816:	1b64      	subs	r4, r4, r5
 8003818:	10a4      	asrs	r4, r4, #2
 800381a:	2600      	movs	r6, #0
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	4d0b      	ldr	r5, [pc, #44]	@ (8003850 <__libc_init_array+0x40>)
 8003822:	4c0c      	ldr	r4, [pc, #48]	@ (8003854 <__libc_init_array+0x44>)
 8003824:	f000 f818 	bl	8003858 <_init>
 8003828:	1b64      	subs	r4, r4, r5
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	2600      	movs	r6, #0
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f855 3b04 	ldr.w	r3, [r5], #4
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	08003914 	.word	0x08003914
 800384c:	08003914 	.word	0x08003914
 8003850:	08003914 	.word	0x08003914
 8003854:	08003918 	.word	0x08003918

08003858 <_init>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr

08003864 <_fini>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr
